// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INSTANCES_TAZ_PROFILE_H_
#define FLATBUFFERS_GENERATED_INSTANCES_TAZ_PROFILE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace taz {
namespace profile {

struct SendInstance;
struct SendInstanceBuilder;

struct RecvInstance;
struct RecvInstanceBuilder;

enum PrimitiveInstance : uint8_t {
  PrimitiveInstance_NONE = 0,
  PrimitiveInstance_MPI_SEND = 1,
  PrimitiveInstance_MPI_RECV = 2,
  PrimitiveInstance_MIN = PrimitiveInstance_NONE,
  PrimitiveInstance_MAX = PrimitiveInstance_MPI_RECV
};

inline const PrimitiveInstance (&EnumValuesPrimitiveInstance())[3] {
  static const PrimitiveInstance values[] = {
    PrimitiveInstance_NONE,
    PrimitiveInstance_MPI_SEND,
    PrimitiveInstance_MPI_RECV
  };
  return values;
}

inline const char * const *EnumNamesPrimitiveInstance() {
  static const char * const names[4] = {
    "NONE",
    "MPI_SEND",
    "MPI_RECV",
    nullptr
  };
  return names;
}

inline const char *EnumNamePrimitiveInstance(PrimitiveInstance e) {
  if (::flatbuffers::IsOutRange(e, PrimitiveInstance_NONE, PrimitiveInstance_MPI_RECV)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPrimitiveInstance()[index];
}

template<typename T> struct PrimitiveInstanceTraits {
  static const PrimitiveInstance enum_value = PrimitiveInstance_NONE;
};

template<> struct PrimitiveInstanceTraits<taz::profile::SendInstance> {
  static const PrimitiveInstance enum_value = PrimitiveInstance_MPI_SEND;
};

template<> struct PrimitiveInstanceTraits<taz::profile::RecvInstance> {
  static const PrimitiveInstance enum_value = PrimitiveInstance_MPI_RECV;
};

bool VerifyPrimitiveInstance(::flatbuffers::Verifier &verifier, const void *obj, PrimitiveInstance type);
bool VerifyPrimitiveInstanceVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct SendInstance FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SendInstanceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENDER = 4,
    VT_RECEIVER = 6,
    VT_SIZE = 8
  };
  uint32_t sender() const {
    return GetField<uint32_t>(VT_SENDER, 0);
  }
  uint32_t receiver() const {
    return GetField<uint32_t>(VT_RECEIVER, 0);
  }
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SENDER, 4) &&
           VerifyField<uint32_t>(verifier, VT_RECEIVER, 4) &&
           VerifyField<uint64_t>(verifier, VT_SIZE, 8) &&
           verifier.EndTable();
  }
};

struct SendInstanceBuilder {
  typedef SendInstance Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_sender(uint32_t sender) {
    fbb_.AddElement<uint32_t>(SendInstance::VT_SENDER, sender, 0);
  }
  void add_receiver(uint32_t receiver) {
    fbb_.AddElement<uint32_t>(SendInstance::VT_RECEIVER, receiver, 0);
  }
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(SendInstance::VT_SIZE, size, 0);
  }
  explicit SendInstanceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SendInstance> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SendInstance>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SendInstance> CreateSendInstance(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sender = 0,
    uint32_t receiver = 0,
    uint64_t size = 0) {
  SendInstanceBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_receiver(receiver);
  builder_.add_sender(sender);
  return builder_.Finish();
}

struct RecvInstance FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RecvInstanceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENDER = 4,
    VT_RECEIVER = 6,
    VT_SIZE = 8
  };
  uint32_t sender() const {
    return GetField<uint32_t>(VT_SENDER, 0);
  }
  uint32_t receiver() const {
    return GetField<uint32_t>(VT_RECEIVER, 0);
  }
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SENDER, 4) &&
           VerifyField<uint32_t>(verifier, VT_RECEIVER, 4) &&
           VerifyField<uint64_t>(verifier, VT_SIZE, 8) &&
           verifier.EndTable();
  }
};

struct RecvInstanceBuilder {
  typedef RecvInstance Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_sender(uint32_t sender) {
    fbb_.AddElement<uint32_t>(RecvInstance::VT_SENDER, sender, 0);
  }
  void add_receiver(uint32_t receiver) {
    fbb_.AddElement<uint32_t>(RecvInstance::VT_RECEIVER, receiver, 0);
  }
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(RecvInstance::VT_SIZE, size, 0);
  }
  explicit RecvInstanceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RecvInstance> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RecvInstance>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RecvInstance> CreateRecvInstance(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sender = 0,
    uint32_t receiver = 0,
    uint64_t size = 0) {
  RecvInstanceBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_receiver(receiver);
  builder_.add_sender(sender);
  return builder_.Finish();
}

inline bool VerifyPrimitiveInstance(::flatbuffers::Verifier &verifier, const void *obj, PrimitiveInstance type) {
  switch (type) {
    case PrimitiveInstance_NONE: {
      return true;
    }
    case PrimitiveInstance_MPI_SEND: {
      auto ptr = reinterpret_cast<const taz::profile::SendInstance *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PrimitiveInstance_MPI_RECV: {
      auto ptr = reinterpret_cast<const taz::profile::RecvInstance *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPrimitiveInstanceVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPrimitiveInstance(
        verifier,  values->Get(i), types->GetEnum<PrimitiveInstance>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace profile
}  // namespace taz

#endif  // FLATBUFFERS_GENERATED_INSTANCES_TAZ_PROFILE_H_
