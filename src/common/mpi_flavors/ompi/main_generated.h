// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_FBS_TAZ_PROFILE_H_
#define FLATBUFFERS_GENERATED_MAIN_FBS_TAZ_PROFILE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 9,
             "Non-compatible flatbuffers version included");

#include "property_generated.h"
#include "instances_generated.h"

namespace fbs {
namespace taz {
namespace profile {

struct ProfileHeader;
struct ProfileHeaderBuilder;

struct TraceStep;
struct TraceStepBuilder;

struct ProfileFile;
struct ProfileFileBuilder;

enum TraceStepType : int8_t {
  TraceStepType_EXEC = 0,
  TraceStepType_BRANCH = 1,
  TraceStepType_RETURN = 2,
  TraceStepType_EXIT = 3,
  TraceStepType_MIN = TraceStepType_EXEC,
  TraceStepType_MAX = TraceStepType_EXIT
};

inline const TraceStepType (&EnumValuesTraceStepType())[4] {
  static const TraceStepType values[] = {
    TraceStepType_EXEC,
    TraceStepType_BRANCH,
    TraceStepType_RETURN,
    TraceStepType_EXIT
  };
  return values;
}

inline const char * const *EnumNamesTraceStepType() {
  static const char * const names[5] = {
    "EXEC",
    "BRANCH",
    "RETURN",
    "EXIT",
    nullptr
  };
  return names;
}

inline const char *EnumNameTraceStepType(TraceStepType e) {
  if (::flatbuffers::IsOutRange(e, TraceStepType_EXEC, TraceStepType_EXIT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTraceStepType()[index];
}

struct ProfileHeader FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProfileHeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROGRAM = 4,
    VT_ARGS = 6,
    VT_ENV = 8,
    VT_WORLD_RANK = 10,
    VT_N_RANKS = 12,
    VT_HOSTS = 14,
    VT_METRICS = 16,
    VT_METRIC_FIELDS = 18,
    VT_PROPERTIES = 20
  };
  const ::flatbuffers::String *program() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROGRAM);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *args() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ARGS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *env() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ENV);
  }
  int32_t world_rank() const {
    return GetField<int32_t>(VT_WORLD_RANK, 0);
  }
  int32_t n_ranks() const {
    return GetField<int32_t>(VT_N_RANKS, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *hosts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_HOSTS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *metrics() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_METRICS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *metric_fields() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_METRIC_FIELDS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::Property>> *properties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::Property>> *>(VT_PROPERTIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROGRAM) &&
           verifier.VerifyString(program()) &&
           VerifyOffset(verifier, VT_ARGS) &&
           verifier.VerifyVector(args()) &&
           verifier.VerifyVectorOfStrings(args()) &&
           VerifyOffset(verifier, VT_ENV) &&
           verifier.VerifyVector(env()) &&
           verifier.VerifyVectorOfStrings(env()) &&
           VerifyField<int32_t>(verifier, VT_WORLD_RANK, 4) &&
           VerifyField<int32_t>(verifier, VT_N_RANKS, 4) &&
           VerifyOffset(verifier, VT_HOSTS) &&
           verifier.VerifyVector(hosts()) &&
           verifier.VerifyVectorOfStrings(hosts()) &&
           VerifyOffset(verifier, VT_METRICS) &&
           verifier.VerifyVector(metrics()) &&
           verifier.VerifyVectorOfStrings(metrics()) &&
           VerifyOffset(verifier, VT_METRIC_FIELDS) &&
           verifier.VerifyVector(metric_fields()) &&
           verifier.VerifyVectorOfStrings(metric_fields()) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           verifier.EndTable();
  }
};

struct ProfileHeaderBuilder {
  typedef ProfileHeader Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_program(::flatbuffers::Offset<::flatbuffers::String> program) {
    fbb_.AddOffset(ProfileHeader::VT_PROGRAM, program);
  }
  void add_args(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> args) {
    fbb_.AddOffset(ProfileHeader::VT_ARGS, args);
  }
  void add_env(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> env) {
    fbb_.AddOffset(ProfileHeader::VT_ENV, env);
  }
  void add_world_rank(int32_t world_rank) {
    fbb_.AddElement<int32_t>(ProfileHeader::VT_WORLD_RANK, world_rank, 0);
  }
  void add_n_ranks(int32_t n_ranks) {
    fbb_.AddElement<int32_t>(ProfileHeader::VT_N_RANKS, n_ranks, 0);
  }
  void add_hosts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> hosts) {
    fbb_.AddOffset(ProfileHeader::VT_HOSTS, hosts);
  }
  void add_metrics(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> metrics) {
    fbb_.AddOffset(ProfileHeader::VT_METRICS, metrics);
  }
  void add_metric_fields(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> metric_fields) {
    fbb_.AddOffset(ProfileHeader::VT_METRIC_FIELDS, metric_fields);
  }
  void add_properties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::Property>>> properties) {
    fbb_.AddOffset(ProfileHeader::VT_PROPERTIES, properties);
  }
  explicit ProfileHeaderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProfileHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProfileHeader>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProfileHeader> CreateProfileHeader(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> program = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> args = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> env = 0,
    int32_t world_rank = 0,
    int32_t n_ranks = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> hosts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> metrics = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> metric_fields = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::Property>>> properties = 0) {
  ProfileHeaderBuilder builder_(_fbb);
  builder_.add_properties(properties);
  builder_.add_metric_fields(metric_fields);
  builder_.add_metrics(metrics);
  builder_.add_hosts(hosts);
  builder_.add_n_ranks(n_ranks);
  builder_.add_world_rank(world_rank);
  builder_.add_env(env);
  builder_.add_args(args);
  builder_.add_program(program);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProfileHeader> CreateProfileHeaderDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *program = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *args = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *env = nullptr,
    int32_t world_rank = 0,
    int32_t n_ranks = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *hosts = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *metrics = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *metric_fields = nullptr,
    const std::vector<::flatbuffers::Offset<fbs::taz::profile::Property>> *properties = nullptr) {
  auto program__ = program ? _fbb.CreateString(program) : 0;
  auto args__ = args ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*args) : 0;
  auto env__ = env ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*env) : 0;
  auto hosts__ = hosts ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*hosts) : 0;
  auto metrics__ = metrics ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*metrics) : 0;
  auto metric_fields__ = metric_fields ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*metric_fields) : 0;
  auto properties__ = properties ? _fbb.CreateVector<::flatbuffers::Offset<fbs::taz::profile::Property>>(*properties) : 0;
  return fbs::taz::profile::CreateProfileHeader(
      _fbb,
      program__,
      args__,
      env__,
      world_rank,
      n_ranks,
      hosts__,
      metrics__,
      metric_fields__,
      properties__);
}

struct TraceStep FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TraceStepBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_EXEC_INSTANCE = 6,
    VT_EXEC_METRIC_FIELDS = 8,
    VT_BRANCH_VARIABLE = 10,
    VT_BRANCH_VAR_VALUES = 12,
    VT_BRANCH_STEP_INDICES = 14
  };
  fbs::taz::profile::TraceStepType type() const {
    return static_cast<fbs::taz::profile::TraceStepType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const fbs::taz::profile::PrimitiveInstance *exec_instance() const {
    return GetPointer<const fbs::taz::profile::PrimitiveInstance *>(VT_EXEC_INSTANCE);
  }
  const ::flatbuffers::Vector<uint64_t> *exec_metric_fields() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_EXEC_METRIC_FIELDS);
  }
  uint32_t branch_variable() const {
    return GetField<uint32_t>(VT_BRANCH_VARIABLE, 0);
  }
  const ::flatbuffers::Vector<uint64_t> *branch_var_values() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_BRANCH_VAR_VALUES);
  }
  const ::flatbuffers::Vector<uint64_t> *branch_step_indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_BRANCH_STEP_INDICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_EXEC_INSTANCE) &&
           verifier.VerifyTable(exec_instance()) &&
           VerifyOffset(verifier, VT_EXEC_METRIC_FIELDS) &&
           verifier.VerifyVector(exec_metric_fields()) &&
           VerifyField<uint32_t>(verifier, VT_BRANCH_VARIABLE, 4) &&
           VerifyOffset(verifier, VT_BRANCH_VAR_VALUES) &&
           verifier.VerifyVector(branch_var_values()) &&
           VerifyOffset(verifier, VT_BRANCH_STEP_INDICES) &&
           verifier.VerifyVector(branch_step_indices()) &&
           verifier.EndTable();
  }
};

struct TraceStepBuilder {
  typedef TraceStep Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(fbs::taz::profile::TraceStepType type) {
    fbb_.AddElement<int8_t>(TraceStep::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_exec_instance(::flatbuffers::Offset<fbs::taz::profile::PrimitiveInstance> exec_instance) {
    fbb_.AddOffset(TraceStep::VT_EXEC_INSTANCE, exec_instance);
  }
  void add_exec_metric_fields(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> exec_metric_fields) {
    fbb_.AddOffset(TraceStep::VT_EXEC_METRIC_FIELDS, exec_metric_fields);
  }
  void add_branch_variable(uint32_t branch_variable) {
    fbb_.AddElement<uint32_t>(TraceStep::VT_BRANCH_VARIABLE, branch_variable, 0);
  }
  void add_branch_var_values(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> branch_var_values) {
    fbb_.AddOffset(TraceStep::VT_BRANCH_VAR_VALUES, branch_var_values);
  }
  void add_branch_step_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> branch_step_indices) {
    fbb_.AddOffset(TraceStep::VT_BRANCH_STEP_INDICES, branch_step_indices);
  }
  explicit TraceStepBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TraceStep> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TraceStep>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TraceStep> CreateTraceStep(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fbs::taz::profile::TraceStepType type = fbs::taz::profile::TraceStepType_EXEC,
    ::flatbuffers::Offset<fbs::taz::profile::PrimitiveInstance> exec_instance = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> exec_metric_fields = 0,
    uint32_t branch_variable = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> branch_var_values = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> branch_step_indices = 0) {
  TraceStepBuilder builder_(_fbb);
  builder_.add_branch_step_indices(branch_step_indices);
  builder_.add_branch_var_values(branch_var_values);
  builder_.add_branch_variable(branch_variable);
  builder_.add_exec_metric_fields(exec_metric_fields);
  builder_.add_exec_instance(exec_instance);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TraceStep> CreateTraceStepDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    fbs::taz::profile::TraceStepType type = fbs::taz::profile::TraceStepType_EXEC,
    ::flatbuffers::Offset<fbs::taz::profile::PrimitiveInstance> exec_instance = 0,
    const std::vector<uint64_t> *exec_metric_fields = nullptr,
    uint32_t branch_variable = 0,
    const std::vector<uint64_t> *branch_var_values = nullptr,
    const std::vector<uint64_t> *branch_step_indices = nullptr) {
  auto exec_metric_fields__ = exec_metric_fields ? _fbb.CreateVector<uint64_t>(*exec_metric_fields) : 0;
  auto branch_var_values__ = branch_var_values ? _fbb.CreateVector<uint64_t>(*branch_var_values) : 0;
  auto branch_step_indices__ = branch_step_indices ? _fbb.CreateVector<uint64_t>(*branch_step_indices) : 0;
  return fbs::taz::profile::CreateTraceStep(
      _fbb,
      type,
      exec_instance,
      exec_metric_fields__,
      branch_variable,
      branch_var_values__,
      branch_step_indices__);
}

struct ProfileFile FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProfileFileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_STEPS = 6,
    VT_INSTANCES = 8
  };
  const fbs::taz::profile::ProfileHeader *header() const {
    return GetPointer<const fbs::taz::profile::ProfileHeader *>(VT_HEADER);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::TraceStep>> *steps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::TraceStep>> *>(VT_STEPS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::PrimitiveInstance>> *instances() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::PrimitiveInstance>> *>(VT_INSTANCES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_STEPS) &&
           verifier.VerifyVector(steps()) &&
           verifier.VerifyVectorOfTables(steps()) &&
           VerifyOffset(verifier, VT_INSTANCES) &&
           verifier.VerifyVector(instances()) &&
           verifier.VerifyVectorOfTables(instances()) &&
           verifier.EndTable();
  }
};

struct ProfileFileBuilder {
  typedef ProfileFile Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<fbs::taz::profile::ProfileHeader> header) {
    fbb_.AddOffset(ProfileFile::VT_HEADER, header);
  }
  void add_steps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::TraceStep>>> steps) {
    fbb_.AddOffset(ProfileFile::VT_STEPS, steps);
  }
  void add_instances(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::PrimitiveInstance>>> instances) {
    fbb_.AddOffset(ProfileFile::VT_INSTANCES, instances);
  }
  explicit ProfileFileBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProfileFile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProfileFile>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProfileFile> CreateProfileFile(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fbs::taz::profile::ProfileHeader> header = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::TraceStep>>> steps = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::PrimitiveInstance>>> instances = 0) {
  ProfileFileBuilder builder_(_fbb);
  builder_.add_instances(instances);
  builder_.add_steps(steps);
  builder_.add_header(header);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProfileFile> CreateProfileFileDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fbs::taz::profile::ProfileHeader> header = 0,
    const std::vector<::flatbuffers::Offset<fbs::taz::profile::TraceStep>> *steps = nullptr,
    const std::vector<::flatbuffers::Offset<fbs::taz::profile::PrimitiveInstance>> *instances = nullptr) {
  auto steps__ = steps ? _fbb.CreateVector<::flatbuffers::Offset<fbs::taz::profile::TraceStep>>(*steps) : 0;
  auto instances__ = instances ? _fbb.CreateVector<::flatbuffers::Offset<fbs::taz::profile::PrimitiveInstance>>(*instances) : 0;
  return fbs::taz::profile::CreateProfileFile(
      _fbb,
      header,
      steps__,
      instances__);
}

inline const fbs::taz::profile::ProfileFile *GetProfileFile(const void *buf) {
  return ::flatbuffers::GetRoot<fbs::taz::profile::ProfileFile>(buf);
}

inline const fbs::taz::profile::ProfileFile *GetSizePrefixedProfileFile(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fbs::taz::profile::ProfileFile>(buf);
}

inline const char *ProfileFileIdentifier() {
  return "TAZP";
}

inline bool ProfileFileBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ProfileFileIdentifier());
}

inline bool SizePrefixedProfileFileBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ProfileFileIdentifier(), true);
}

inline bool VerifyProfileFileBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::taz::profile::ProfileFile>(ProfileFileIdentifier());
}

inline bool VerifySizePrefixedProfileFileBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::taz::profile::ProfileFile>(ProfileFileIdentifier());
}

inline void FinishProfileFileBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::taz::profile::ProfileFile> root) {
  fbb.Finish(root, ProfileFileIdentifier());
}

inline void FinishSizePrefixedProfileFileBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::taz::profile::ProfileFile> root) {
  fbb.FinishSizePrefixed(root, ProfileFileIdentifier());
}

}  // namespace profile
}  // namespace taz
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_MAIN_FBS_TAZ_PROFILE_H_
