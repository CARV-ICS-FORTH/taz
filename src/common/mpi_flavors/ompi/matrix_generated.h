// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATRIX_FBS_TAZ_PROFILE_H_
#define FLATBUFFERS_GENERATED_MATRIX_FBS_TAZ_PROFILE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 9,
             "Non-compatible flatbuffers version included");

#include "property_generated.h"

namespace fbs {
namespace taz {
namespace profile {

struct Matrix;
struct MatrixBuilder;

struct Matrix FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MatrixBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_NCOLS = 6,
    VT_NROWS = 8,
    VT_APPROX_DATA = 10,
    VT_EXACT_DATA = 12,
    VT_PROPERTIES = 14
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  uint32_t ncols() const {
    return GetField<uint32_t>(VT_NCOLS, 0);
  }
  uint32_t nrows() const {
    return GetField<uint32_t>(VT_NROWS, 0);
  }
  const ::flatbuffers::Vector<uint8_t> *approx_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_APPROX_DATA);
  }
  const ::flatbuffers::Vector<uint64_t> *exact_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_EXACT_DATA);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::Property>> *properties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::Property>> *>(VT_PROPERTIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_NCOLS, 4) &&
           VerifyField<uint32_t>(verifier, VT_NROWS, 4) &&
           VerifyOffset(verifier, VT_APPROX_DATA) &&
           verifier.VerifyVector(approx_data()) &&
           VerifyOffset(verifier, VT_EXACT_DATA) &&
           verifier.VerifyVector(exact_data()) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           verifier.EndTable();
  }
};

struct MatrixBuilder {
  typedef Matrix Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Matrix::VT_NAME, name);
  }
  void add_ncols(uint32_t ncols) {
    fbb_.AddElement<uint32_t>(Matrix::VT_NCOLS, ncols, 0);
  }
  void add_nrows(uint32_t nrows) {
    fbb_.AddElement<uint32_t>(Matrix::VT_NROWS, nrows, 0);
  }
  void add_approx_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> approx_data) {
    fbb_.AddOffset(Matrix::VT_APPROX_DATA, approx_data);
  }
  void add_exact_data(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> exact_data) {
    fbb_.AddOffset(Matrix::VT_EXACT_DATA, exact_data);
  }
  void add_properties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::Property>>> properties) {
    fbb_.AddOffset(Matrix::VT_PROPERTIES, properties);
  }
  explicit MatrixBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Matrix> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Matrix>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Matrix> CreateMatrix(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint32_t ncols = 0,
    uint32_t nrows = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> approx_data = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> exact_data = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fbs::taz::profile::Property>>> properties = 0) {
  MatrixBuilder builder_(_fbb);
  builder_.add_properties(properties);
  builder_.add_exact_data(exact_data);
  builder_.add_approx_data(approx_data);
  builder_.add_nrows(nrows);
  builder_.add_ncols(ncols);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Matrix> CreateMatrixDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t ncols = 0,
    uint32_t nrows = 0,
    const std::vector<uint8_t> *approx_data = nullptr,
    const std::vector<uint64_t> *exact_data = nullptr,
    const std::vector<::flatbuffers::Offset<fbs::taz::profile::Property>> *properties = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto approx_data__ = approx_data ? _fbb.CreateVector<uint8_t>(*approx_data) : 0;
  auto exact_data__ = exact_data ? _fbb.CreateVector<uint64_t>(*exact_data) : 0;
  auto properties__ = properties ? _fbb.CreateVector<::flatbuffers::Offset<fbs::taz::profile::Property>>(*properties) : 0;
  return fbs::taz::profile::CreateMatrix(
      _fbb,
      name__,
      ncols,
      nrows,
      approx_data__,
      exact_data__,
      properties__);
}

inline const fbs::taz::profile::Matrix *GetMatrix(const void *buf) {
  return ::flatbuffers::GetRoot<fbs::taz::profile::Matrix>(buf);
}

inline const fbs::taz::profile::Matrix *GetSizePrefixedMatrix(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fbs::taz::profile::Matrix>(buf);
}

inline const char *MatrixIdentifier() {
  return "TAZM";
}

inline bool MatrixBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MatrixIdentifier());
}

inline bool SizePrefixedMatrixBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MatrixIdentifier(), true);
}

inline bool VerifyMatrixBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fbs::taz::profile::Matrix>(MatrixIdentifier());
}

inline bool VerifySizePrefixedMatrixBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fbs::taz::profile::Matrix>(MatrixIdentifier());
}

inline void FinishMatrixBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::taz::profile::Matrix> root) {
  fbb.Finish(root, MatrixIdentifier());
}

inline void FinishSizePrefixedMatrixBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fbs::taz::profile::Matrix> root) {
  fbb.FinishSizePrefixed(root, MatrixIdentifier());
}

}  // namespace profile
}  // namespace taz
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_MATRIX_FBS_TAZ_PROFILE_H_
