// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROPERTY_FBS_TAZ_PROFILE_H_
#define FLATBUFFERS_GENERATED_PROPERTY_FBS_TAZ_PROFILE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 9,
             "Non-compatible flatbuffers version included");

namespace fbs {
namespace taz {
namespace profile {

struct Property;
struct PropertyBuilder;

struct Property FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_V_INTS = 6,
    VT_V_FLOATS = 8,
    VT_V_STR = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<int64_t> *v_ints() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_V_INTS);
  }
  const ::flatbuffers::Vector<double> *v_floats() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_V_FLOATS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *v_str() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_V_STR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_V_INTS) &&
           verifier.VerifyVector(v_ints()) &&
           VerifyOffset(verifier, VT_V_FLOATS) &&
           verifier.VerifyVector(v_floats()) &&
           VerifyOffset(verifier, VT_V_STR) &&
           verifier.VerifyVector(v_str()) &&
           verifier.VerifyVectorOfStrings(v_str()) &&
           verifier.EndTable();
  }
};

struct PropertyBuilder {
  typedef Property Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Property::VT_NAME, name);
  }
  void add_v_ints(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> v_ints) {
    fbb_.AddOffset(Property::VT_V_INTS, v_ints);
  }
  void add_v_floats(::flatbuffers::Offset<::flatbuffers::Vector<double>> v_floats) {
    fbb_.AddOffset(Property::VT_V_FLOATS, v_floats);
  }
  void add_v_str(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> v_str) {
    fbb_.AddOffset(Property::VT_V_STR, v_str);
  }
  explicit PropertyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Property> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Property>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Property> CreateProperty(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> v_ints = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> v_floats = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> v_str = 0) {
  PropertyBuilder builder_(_fbb);
  builder_.add_v_str(v_str);
  builder_.add_v_floats(v_floats);
  builder_.add_v_ints(v_ints);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Property> CreatePropertyDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<int64_t> *v_ints = nullptr,
    const std::vector<double> *v_floats = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *v_str = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto v_ints__ = v_ints ? _fbb.CreateVector<int64_t>(*v_ints) : 0;
  auto v_floats__ = v_floats ? _fbb.CreateVector<double>(*v_floats) : 0;
  auto v_str__ = v_str ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*v_str) : 0;
  return fbs::taz::profile::CreateProperty(
      _fbb,
      name__,
      v_ints__,
      v_floats__,
      v_str__);
}

}  // namespace profile
}  // namespace taz
}  // namespace fbs

#endif  // FLATBUFFERS_GENERATED_PROPERTY_FBS_TAZ_PROFILE_H_
