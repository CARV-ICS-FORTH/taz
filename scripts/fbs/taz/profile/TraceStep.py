# automatically generated by the FlatBuffers compiler, do not modify

# namespace: profile

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TraceStep(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TraceStep()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTraceStep(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TraceStepBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x41\x5A\x50", size_prefixed=size_prefixed)

    # TraceStep
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TraceStep
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # TraceStep
    def ExecInstance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from taz.profile.PrimitiveInstance import PrimitiveInstance
            obj = PrimitiveInstance()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TraceStep
    def ExecMetricFields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TraceStep
    def ExecMetricFieldsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # TraceStep
    def ExecMetricFieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TraceStep
    def ExecMetricFieldsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # TraceStep
    def BranchVariable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TraceStep
    def BranchVarValues(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TraceStep
    def BranchVarValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # TraceStep
    def BranchVarValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TraceStep
    def BranchVarValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # TraceStep
    def BranchStepIndices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TraceStep
    def BranchStepIndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # TraceStep
    def BranchStepIndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TraceStep
    def BranchStepIndicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def TraceStepStart(builder):
    builder.StartObject(6)

def Start(builder):
    TraceStepStart(builder)

def TraceStepAddType(builder, type):
    builder.PrependInt8Slot(0, type, 0)

def AddType(builder, type):
    TraceStepAddType(builder, type)

def TraceStepAddExecInstance(builder, execInstance):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(execInstance), 0)

def AddExecInstance(builder, execInstance):
    TraceStepAddExecInstance(builder, execInstance)

def TraceStepAddExecMetricFields(builder, execMetricFields):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(execMetricFields), 0)

def AddExecMetricFields(builder, execMetricFields):
    TraceStepAddExecMetricFields(builder, execMetricFields)

def TraceStepStartExecMetricFieldsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartExecMetricFieldsVector(builder, numElems: int) -> int:
    return TraceStepStartExecMetricFieldsVector(builder, numElems)

def TraceStepAddBranchVariable(builder, branchVariable):
    builder.PrependUint32Slot(3, branchVariable, 0)

def AddBranchVariable(builder, branchVariable):
    TraceStepAddBranchVariable(builder, branchVariable)

def TraceStepAddBranchVarValues(builder, branchVarValues):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(branchVarValues), 0)

def AddBranchVarValues(builder, branchVarValues):
    TraceStepAddBranchVarValues(builder, branchVarValues)

def TraceStepStartBranchVarValuesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartBranchVarValuesVector(builder, numElems: int) -> int:
    return TraceStepStartBranchVarValuesVector(builder, numElems)

def TraceStepAddBranchStepIndices(builder, branchStepIndices):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(branchStepIndices), 0)

def AddBranchStepIndices(builder, branchStepIndices):
    TraceStepAddBranchStepIndices(builder, branchStepIndices)

def TraceStepStartBranchStepIndicesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartBranchStepIndicesVector(builder, numElems: int) -> int:
    return TraceStepStartBranchStepIndicesVector(builder, numElems)

def TraceStepEnd(builder):
    return builder.EndObject()

def End(builder):
    return TraceStepEnd(builder)
