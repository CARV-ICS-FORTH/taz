# automatically generated by the FlatBuffers compiler, do not modify

# namespace: profile

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ProfileHeader(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProfileHeader()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProfileHeader(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ProfileHeaderBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x41\x5A\x50", size_prefixed=size_prefixed)

    # ProfileHeader
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProfileHeader
    def Program(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ProfileHeader
    def Args(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ProfileHeader
    def ArgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProfileHeader
    def ArgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ProfileHeader
    def Env(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ProfileHeader
    def EnvLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProfileHeader
    def EnvIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # ProfileHeader
    def WorldRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ProfileHeader
    def NRanks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ProfileHeader
    def Hosts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ProfileHeader
    def HostsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProfileHeader
    def HostsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # ProfileHeader
    def Metrics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ProfileHeader
    def MetricsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProfileHeader
    def MetricsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ProfileHeader
    def MetricFields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ProfileHeader
    def MetricFieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProfileHeader
    def MetricFieldsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # ProfileHeader
    def Properties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from taz.profile.Property import Property
            obj = Property()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProfileHeader
    def PropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProfileHeader
    def PropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def ProfileHeaderStart(builder):
    builder.StartObject(9)

def Start(builder):
    ProfileHeaderStart(builder)

def ProfileHeaderAddProgram(builder, program):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(program), 0)

def AddProgram(builder, program):
    ProfileHeaderAddProgram(builder, program)

def ProfileHeaderAddArgs(builder, args):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(args), 0)

def AddArgs(builder, args):
    ProfileHeaderAddArgs(builder, args)

def ProfileHeaderStartArgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArgsVector(builder, numElems: int) -> int:
    return ProfileHeaderStartArgsVector(builder, numElems)

def ProfileHeaderAddEnv(builder, env):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(env), 0)

def AddEnv(builder, env):
    ProfileHeaderAddEnv(builder, env)

def ProfileHeaderStartEnvVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEnvVector(builder, numElems: int) -> int:
    return ProfileHeaderStartEnvVector(builder, numElems)

def ProfileHeaderAddWorldRank(builder, worldRank):
    builder.PrependInt32Slot(3, worldRank, 0)

def AddWorldRank(builder, worldRank):
    ProfileHeaderAddWorldRank(builder, worldRank)

def ProfileHeaderAddNRanks(builder, nRanks):
    builder.PrependInt32Slot(4, nRanks, 0)

def AddNRanks(builder, nRanks):
    ProfileHeaderAddNRanks(builder, nRanks)

def ProfileHeaderAddHosts(builder, hosts):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(hosts), 0)

def AddHosts(builder, hosts):
    ProfileHeaderAddHosts(builder, hosts)

def ProfileHeaderStartHostsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartHostsVector(builder, numElems: int) -> int:
    return ProfileHeaderStartHostsVector(builder, numElems)

def ProfileHeaderAddMetrics(builder, metrics):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(metrics), 0)

def AddMetrics(builder, metrics):
    ProfileHeaderAddMetrics(builder, metrics)

def ProfileHeaderStartMetricsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMetricsVector(builder, numElems: int) -> int:
    return ProfileHeaderStartMetricsVector(builder, numElems)

def ProfileHeaderAddMetricFields(builder, metricFields):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(metricFields), 0)

def AddMetricFields(builder, metricFields):
    ProfileHeaderAddMetricFields(builder, metricFields)

def ProfileHeaderStartMetricFieldsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMetricFieldsVector(builder, numElems: int) -> int:
    return ProfileHeaderStartMetricFieldsVector(builder, numElems)

def ProfileHeaderAddProperties(builder, properties):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)

def AddProperties(builder, properties):
    ProfileHeaderAddProperties(builder, properties)

def ProfileHeaderStartPropertiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPropertiesVector(builder, numElems: int) -> int:
    return ProfileHeaderStartPropertiesVector(builder, numElems)

def ProfileHeaderEnd(builder):
    return builder.EndObject()

def End(builder):
    return ProfileHeaderEnd(builder)
