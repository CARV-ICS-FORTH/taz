# automatically generated by the FlatBuffers compiler, do not modify

# namespace: profile

import flatbuffers
import fbs.taz.profile.Property
from flatbuffers.compat import import_numpy
np = import_numpy()

class Matrix(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Matrix()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMatrix(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MatrixBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x41\x5A\x4D", size_prefixed=size_prefixed)

    # Matrix
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Matrix
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Matrix
    def Ncols(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Matrix
    def Nrows(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Matrix
    def ApproxData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Matrix
    def ApproxDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Matrix
    def ApproxDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Matrix
    def ApproxDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Matrix
    def ExactData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Matrix
    def ExactDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # Matrix
    def ExactDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Matrix
    def ExactDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Matrix
    def Properties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from fbs.taz.profile.Property import Property
            obj = Property()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Matrix
    def PropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Matrix
    def PropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def MatrixStart(builder):
    builder.StartObject(6)

def Start(builder):
    MatrixStart(builder)

def MatrixAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    MatrixAddName(builder, name)

def MatrixAddNcols(builder, ncols):
    builder.PrependUint32Slot(1, ncols, 0)

def AddNcols(builder, ncols):
    MatrixAddNcols(builder, ncols)

def MatrixAddNrows(builder, nrows):
    builder.PrependUint32Slot(2, nrows, 0)

def AddNrows(builder, nrows):
    MatrixAddNrows(builder, nrows)

def MatrixAddApproxData(builder, approxData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(approxData), 0)

def AddApproxData(builder, approxData):
    MatrixAddApproxData(builder, approxData)

def MatrixStartApproxDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartApproxDataVector(builder, numElems: int) -> int:
    return MatrixStartApproxDataVector(builder, numElems)

def MatrixAddExactData(builder, exactData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(exactData), 0)

def AddExactData(builder, exactData):
    MatrixAddExactData(builder, exactData)

def MatrixStartExactDataVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartExactDataVector(builder, numElems: int) -> int:
    return MatrixStartExactDataVector(builder, numElems)

def MatrixAddProperties(builder, properties):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)

def AddProperties(builder, properties):
    MatrixAddProperties(builder, properties)

def MatrixStartPropertiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPropertiesVector(builder, numElems: int) -> int:
    return MatrixStartPropertiesVector(builder, numElems)

def MatrixEnd(builder):
    return builder.EndObject()

def End(builder):
    return MatrixEnd(builder)
