# automatically generated by the FlatBuffers compiler, do not modify

# namespace: profile

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PrimitiveInstance(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PrimitiveInstance()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPrimitiveInstance(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PrimitiveInstance
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PrimitiveInstance
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Amodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def AmodesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def AmodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def AmodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # PrimitiveInstance
    def Arrayofblocklengths(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ArrayofblocklengthsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ArrayofblocklengthsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArrayofblocklengthsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # PrimitiveInstance
    def Arrayofdisplacements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ArrayofdisplacementsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ArrayofdisplacementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArrayofdisplacementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # PrimitiveInstance
    def Arrayoferrcodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ArrayoferrcodesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ArrayoferrcodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArrayoferrcodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # PrimitiveInstance
    def Arrayofindices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ArrayofindicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ArrayofindicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArrayofindicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # PrimitiveInstance
    def Arrayofinfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ArrayofinfoAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ArrayofinfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArrayofinfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # PrimitiveInstance
    def Arrayofintegers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ArrayofintegersAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ArrayofintegersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArrayofintegersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # PrimitiveInstance
    def Arrayofmaxprocs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ArrayofmaxprocsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ArrayofmaxprocsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArrayofmaxprocsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # PrimitiveInstance
    def Arrayofrequests(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ArrayofrequestsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ArrayofrequestsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArrayofrequestsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # PrimitiveInstance
    def Arrayofstatuses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ArrayofstatusesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ArrayofstatusesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArrayofstatusesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # PrimitiveInstance
    def Combiner(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def CombinerAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def CombinerLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def CombinerIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # PrimitiveInstance
    def Comms(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def CommsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def CommsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def CommsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # PrimitiveInstance
    def Commcart(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def CommcartAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def CommcartLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def CommcartIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # PrimitiveInstance
    def Commdistgraph(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def CommdistgraphAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def CommdistgraphLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def CommdistgraphIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # PrimitiveInstance
    def Commgraph(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def CommgraphAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def CommgraphLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def CommgraphIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # PrimitiveInstance
    def Commkeyvals(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def CommkeyvalsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def CommkeyvalsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def CommkeyvalsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # PrimitiveInstance
    def Commutes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def CommutesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def CommutesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def CommutesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # PrimitiveInstance
    def Coords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def CoordsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def CoordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def CoordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # PrimitiveInstance
    def Counts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def CountsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def CountsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def CountsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # PrimitiveInstance
    def Cstatus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def CstatusAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def CstatusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def CstatusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # PrimitiveInstance
    def Dargarray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def DargarrayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def DargarrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def DargarrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # PrimitiveInstance
    def Degrees(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def DegreesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def DegreesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def DegreesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # PrimitiveInstance
    def Destinations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def DestinationsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def DestinationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def DestinationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # PrimitiveInstance
    def Destweights(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def DestweightsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def DestweightsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def DestweightsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # PrimitiveInstance
    def Dims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def DimsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def DimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def DimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # PrimitiveInstance
    def Displs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def DisplsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def DisplsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def DisplsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # PrimitiveInstance
    def Dispunits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def DispunitsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def DispunitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def DispunitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # PrimitiveInstance
    def Distribarray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def DistribarrayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def DistribarrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def DistribarrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # PrimitiveInstance
    def Edges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def EdgesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def EdgesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def EdgesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # PrimitiveInstance
    def Errorclasss(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ErrorclasssAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ErrorclasssLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ErrorclasssIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # PrimitiveInstance
    def Errorcodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ErrorcodesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ErrorcodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ErrorcodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

    # PrimitiveInstance
    def Extent(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ExtentAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ExtentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ExtentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        return o == 0

    # PrimitiveInstance
    def Flags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def FlagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def FlagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def FlagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # PrimitiveInstance
    def Fstatus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def FstatusAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def FstatusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def FstatusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

    # PrimitiveInstance
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def GroupsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        return o == 0

    # PrimitiveInstance
    def Gsizearray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def GsizearrayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def GsizearrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def GsizearrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        return o == 0

    # PrimitiveInstance
    def Index(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def IndexAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def IndexLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def IndexIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        return o == 0

    # PrimitiveInstance
    def Inneighbors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def InneighborsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def InneighborsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def InneighborsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # PrimitiveInstance
    def Intercomms(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def IntercommsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def IntercommsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def IntercommsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # PrimitiveInstance
    def Lb(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def LbAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def LbLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def LbIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        return o == 0

    # PrimitiveInstance
    def Messages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def MessagesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def MessagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def MessagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        return o == 0

    # PrimitiveInstance
    def Ndimss(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NdimssAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NdimssLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NdimssIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        return o == 0

    # PrimitiveInstance
    def Nedges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NedgesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NedgesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NedgesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        return o == 0

    # PrimitiveInstance
    def Neighbors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NeighborsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NeighborsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NeighborsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        return o == 0

    # PrimitiveInstance
    def Newcomm(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NewcommAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NewcommLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NewcommIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        return o == 0

    # PrimitiveInstance
    def Newgroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NewgroupAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NewgroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NewgroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        return o == 0

    # PrimitiveInstance
    def Newintercomm(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NewintercommAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NewintercommLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NewintercommIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        return o == 0

    # PrimitiveInstance
    def Newrank(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NewrankAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NewrankLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NewrankIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        return o == 0

    # PrimitiveInstance
    def Nkeys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NkeysAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NkeysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NkeysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        return o == 0

    # PrimitiveInstance
    def Nneighbors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NneighborsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NneighborsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NneighborsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        return o == 0

    # PrimitiveInstance
    def Nnodess(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NnodessAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NnodessLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NnodessIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        return o == 0

    # PrimitiveInstance
    def Nodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NodesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        return o == 0

    # PrimitiveInstance
    def Numaddresses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NumaddressesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NumaddressesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NumaddressesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        return o == 0

    # PrimitiveInstance
    def Numdatatypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NumdatatypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NumdatatypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NumdatatypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        return o == 0

    # PrimitiveInstance
    def Numintegers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def NumintegersAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def NumintegersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def NumintegersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        return o == 0

    # PrimitiveInstance
    def Outcounts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def OutcountsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def OutcountsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def OutcountsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        return o == 0

    # PrimitiveInstance
    def Outneighbors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def OutneighborsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def OutneighborsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def OutneighborsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        return o == 0

    # PrimitiveInstance
    def Parent(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ParentAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ParentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ParentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        return o == 0

    # PrimitiveInstance
    def Periods(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def PeriodsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def PeriodsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def PeriodsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        return o == 0

    # PrimitiveInstance
    def Position(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def PositionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def PositionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def PositionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        return o == 0

    # PrimitiveInstance
    def Provided(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ProvidedAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ProvidedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ProvidedIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        return o == 0

    # PrimitiveInstance
    def Psizearray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def PsizearrayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def PsizearrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def PsizearrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        return o == 0

    # PrimitiveInstance
    def Ranks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def RanksAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def RanksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def RanksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        return o == 0

    # PrimitiveInstance
    def Rankdest(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def RankdestAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def RankdestLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def RankdestIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        return o == 0

    # PrimitiveInstance
    def Rankss(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def RankssAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def RankssLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def RankssIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        return o == 0

    # PrimitiveInstance
    def Ranks1(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def Ranks1AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def Ranks1Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def Ranks1IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        return o == 0

    # PrimitiveInstance
    def Ranks2(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def Ranks2AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def Ranks2Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def Ranks2IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        return o == 0

    # PrimitiveInstance
    def Ranksource(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def RanksourceAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def RanksourceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def RanksourceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        return o == 0

    # PrimitiveInstance
    def Rdispls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def RdisplsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def RdisplsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def RdisplsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        return o == 0

    # PrimitiveInstance
    def Recvcounts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def RecvcountsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def RecvcountsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def RecvcountsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        return o == 0

    # PrimitiveInstance
    def Remaindims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def RemaindimsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def RemaindimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def RemaindimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        return o == 0

    # PrimitiveInstance
    def Requests(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def RequestsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def RequestsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def RequestsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        return o == 0

    # PrimitiveInstance
    def Result(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ResultAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ResultLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ResultIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        return o == 0

    # PrimitiveInstance
    def Resultlen(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def ResultlenAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def ResultlenLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ResultlenIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        return o == 0

    # PrimitiveInstance
    def Sdispls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def SdisplsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def SdisplsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def SdisplsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        return o == 0

    # PrimitiveInstance
    def Sendcounts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def SendcountsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def SendcountsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def SendcountsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        return o == 0

    # PrimitiveInstance
    def Sizes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def SizesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def SizesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def SizesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        return o == 0

    # PrimitiveInstance
    def Sizearray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def SizearrayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def SizearrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def SizearrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        return o == 0

    # PrimitiveInstance
    def Sources(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def SourcesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def SourcesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def SourcesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        return o == 0

    # PrimitiveInstance
    def Sourceweights(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def SourceweightsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def SourceweightsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def SourceweightsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        return o == 0

    # PrimitiveInstance
    def Startarray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def StartarrayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def StartarrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def StartarrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        return o == 0

    # PrimitiveInstance
    def Status(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def StatusAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def StatusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def StatusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        return o == 0

    # PrimitiveInstance
    def Subsizearray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def SubsizearrayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def SubsizearrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def SubsizearrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        return o == 0

    # PrimitiveInstance
    def Subversion(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def SubversionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def SubversionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def SubversionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        return o == 0

    # PrimitiveInstance
    def Targets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def TargetsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def TargetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def TargetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        return o == 0

    # PrimitiveInstance
    def Trueextent(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def TrueextentAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def TrueextentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def TrueextentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        return o == 0

    # PrimitiveInstance
    def Truelb(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def TruelbAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def TruelbLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def TruelbIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        return o == 0

    # PrimitiveInstance
    def Typekeyvals(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def TypekeyvalsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def TypekeyvalsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def TypekeyvalsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        return o == 0

    # PrimitiveInstance
    def Version(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def VersionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def VersionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def VersionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        return o == 0

    # PrimitiveInstance
    def Weighted(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def WeightedAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def WeightedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def WeightedIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        return o == 0

    # PrimitiveInstance
    def Weights(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def WeightsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def WeightsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def WeightsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        return o == 0

    # PrimitiveInstance
    def Winkeyvals(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # PrimitiveInstance
    def WinkeyvalsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # PrimitiveInstance
    def WinkeyvalsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def WinkeyvalsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        return o == 0

    # PrimitiveInstance
    def Argv(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # PrimitiveInstance
    def ArgvLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArgvIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        return o == 0

    # PrimitiveInstance
    def Arrayofargv(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # PrimitiveInstance
    def ArrayofargvLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArrayofargvIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        return o == 0

    # PrimitiveInstance
    def Arrayofcommands(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # PrimitiveInstance
    def ArrayofcommandsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PrimitiveInstance
    def ArrayofcommandsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        return o == 0

    # PrimitiveInstance
    def Amode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Blocklength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(198))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Bridgecomm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(200))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(202))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Comm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(204))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Comm1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(206))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Comm2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(208))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Commkeyval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(210))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Commold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(212))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Commute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(214))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(216))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Datatype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(218))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Dest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(220))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(222))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Disp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(224))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Dispunit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(226))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Erhandler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(228))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Errhandler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(230))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Errorclass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(232))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Errorcode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(234))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Fd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(236))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Fh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(238))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def File(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(240))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Flag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(242))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Group(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(244))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Group1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(246))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Group2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(248))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def High(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(250))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Incount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(252))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Indegree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(254))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Info(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(256))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Infoused(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(258))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Insize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(260))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Intercomm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(262))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(264))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Localcomm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(266))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Localleader(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(268))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Locktype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(270))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Maxaddresses(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(272))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Maxdatatypes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(274))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Maxdims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(276))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Maxedges(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(278))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Maxindegree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(280))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Maxindex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(282))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Maxintegers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(284))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Maxneighbors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(286))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Maxoutdegree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(288))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Maxprocs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(290))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(292))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Mpiassert(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(294))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def N(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(296))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Ndims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(298))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Newinfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(300))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Nnodes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(302))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Oldcomm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(304))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Op(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(306))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(308))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Origincount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(310))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Outcount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(312))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Outdegree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(314))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Outsize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(316))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def P(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(318))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def R(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(320))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(322))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Recvcount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(324))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Recvtag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(326))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Remoteleader(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(328))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Reorder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(330))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(332))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Resultcount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(334))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Root(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(336))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Sendcount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(338))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Sendtag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(340))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(342))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(344))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Splittype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(346))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Stride(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(348))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Tag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(350))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Targetcount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(352))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Targetcout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(354))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Targetrank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(356))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Typeclass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(358))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Typekeyval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(360))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Whence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(362))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Win(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(364))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Winkeyval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(366))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PrimitiveInstance
    def Cancelfn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(368))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Command(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(370))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Commcopyattrfn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(372))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Commdeleteattrfn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(374))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Commname(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(376))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Datarep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(378))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Dtypefileextentfn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(380))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Filename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(382))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Freefn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(384))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Function(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(386))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Keys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(388))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(390))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Portname(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(392))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Queryfn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(394))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Readconversionfn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(396))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Servicename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(398))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def String(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(400))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Typecopyattrfn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(402))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Typedeleteattrfn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(404))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Typename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(406))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(408))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Versions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(410))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Wincopyattrfn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(412))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Windeleteattrfn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(414))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Winname(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(416))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PrimitiveInstance
    def Writeconversionfn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(418))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PrimitiveInstanceStart(builder):
    builder.StartObject(208)

def Start(builder):
    PrimitiveInstanceStart(builder)

def PrimitiveInstanceAddType(builder, type):
    builder.PrependUint16Slot(0, type, 0)

def AddType(builder, type):
    PrimitiveInstanceAddType(builder, type)

def PrimitiveInstanceAddAmodes(builder, amodes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(amodes), 0)

def AddAmodes(builder, amodes):
    PrimitiveInstanceAddAmodes(builder, amodes)

def PrimitiveInstanceStartAmodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAmodesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartAmodesVector(builder, numElems)

def PrimitiveInstanceAddArrayofblocklengths(builder, arrayofblocklengths):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(arrayofblocklengths), 0)

def AddArrayofblocklengths(builder, arrayofblocklengths):
    PrimitiveInstanceAddArrayofblocklengths(builder, arrayofblocklengths)

def PrimitiveInstanceStartArrayofblocklengthsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArrayofblocklengthsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArrayofblocklengthsVector(builder, numElems)

def PrimitiveInstanceAddArrayofdisplacements(builder, arrayofdisplacements):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(arrayofdisplacements), 0)

def AddArrayofdisplacements(builder, arrayofdisplacements):
    PrimitiveInstanceAddArrayofdisplacements(builder, arrayofdisplacements)

def PrimitiveInstanceStartArrayofdisplacementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArrayofdisplacementsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArrayofdisplacementsVector(builder, numElems)

def PrimitiveInstanceAddArrayoferrcodes(builder, arrayoferrcodes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(arrayoferrcodes), 0)

def AddArrayoferrcodes(builder, arrayoferrcodes):
    PrimitiveInstanceAddArrayoferrcodes(builder, arrayoferrcodes)

def PrimitiveInstanceStartArrayoferrcodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArrayoferrcodesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArrayoferrcodesVector(builder, numElems)

def PrimitiveInstanceAddArrayofindices(builder, arrayofindices):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(arrayofindices), 0)

def AddArrayofindices(builder, arrayofindices):
    PrimitiveInstanceAddArrayofindices(builder, arrayofindices)

def PrimitiveInstanceStartArrayofindicesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArrayofindicesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArrayofindicesVector(builder, numElems)

def PrimitiveInstanceAddArrayofinfo(builder, arrayofinfo):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(arrayofinfo), 0)

def AddArrayofinfo(builder, arrayofinfo):
    PrimitiveInstanceAddArrayofinfo(builder, arrayofinfo)

def PrimitiveInstanceStartArrayofinfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArrayofinfoVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArrayofinfoVector(builder, numElems)

def PrimitiveInstanceAddArrayofintegers(builder, arrayofintegers):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(arrayofintegers), 0)

def AddArrayofintegers(builder, arrayofintegers):
    PrimitiveInstanceAddArrayofintegers(builder, arrayofintegers)

def PrimitiveInstanceStartArrayofintegersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArrayofintegersVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArrayofintegersVector(builder, numElems)

def PrimitiveInstanceAddArrayofmaxprocs(builder, arrayofmaxprocs):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(arrayofmaxprocs), 0)

def AddArrayofmaxprocs(builder, arrayofmaxprocs):
    PrimitiveInstanceAddArrayofmaxprocs(builder, arrayofmaxprocs)

def PrimitiveInstanceStartArrayofmaxprocsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArrayofmaxprocsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArrayofmaxprocsVector(builder, numElems)

def PrimitiveInstanceAddArrayofrequests(builder, arrayofrequests):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(arrayofrequests), 0)

def AddArrayofrequests(builder, arrayofrequests):
    PrimitiveInstanceAddArrayofrequests(builder, arrayofrequests)

def PrimitiveInstanceStartArrayofrequestsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArrayofrequestsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArrayofrequestsVector(builder, numElems)

def PrimitiveInstanceAddArrayofstatuses(builder, arrayofstatuses):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(arrayofstatuses), 0)

def AddArrayofstatuses(builder, arrayofstatuses):
    PrimitiveInstanceAddArrayofstatuses(builder, arrayofstatuses)

def PrimitiveInstanceStartArrayofstatusesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArrayofstatusesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArrayofstatusesVector(builder, numElems)

def PrimitiveInstanceAddCombiner(builder, combiner):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(combiner), 0)

def AddCombiner(builder, combiner):
    PrimitiveInstanceAddCombiner(builder, combiner)

def PrimitiveInstanceStartCombinerVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCombinerVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartCombinerVector(builder, numElems)

def PrimitiveInstanceAddComms(builder, comms):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(comms), 0)

def AddComms(builder, comms):
    PrimitiveInstanceAddComms(builder, comms)

def PrimitiveInstanceStartCommsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCommsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartCommsVector(builder, numElems)

def PrimitiveInstanceAddCommcart(builder, commcart):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(commcart), 0)

def AddCommcart(builder, commcart):
    PrimitiveInstanceAddCommcart(builder, commcart)

def PrimitiveInstanceStartCommcartVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCommcartVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartCommcartVector(builder, numElems)

def PrimitiveInstanceAddCommdistgraph(builder, commdistgraph):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(commdistgraph), 0)

def AddCommdistgraph(builder, commdistgraph):
    PrimitiveInstanceAddCommdistgraph(builder, commdistgraph)

def PrimitiveInstanceStartCommdistgraphVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCommdistgraphVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartCommdistgraphVector(builder, numElems)

def PrimitiveInstanceAddCommgraph(builder, commgraph):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(commgraph), 0)

def AddCommgraph(builder, commgraph):
    PrimitiveInstanceAddCommgraph(builder, commgraph)

def PrimitiveInstanceStartCommgraphVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCommgraphVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartCommgraphVector(builder, numElems)

def PrimitiveInstanceAddCommkeyvals(builder, commkeyvals):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(commkeyvals), 0)

def AddCommkeyvals(builder, commkeyvals):
    PrimitiveInstanceAddCommkeyvals(builder, commkeyvals)

def PrimitiveInstanceStartCommkeyvalsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCommkeyvalsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartCommkeyvalsVector(builder, numElems)

def PrimitiveInstanceAddCommutes(builder, commutes):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(commutes), 0)

def AddCommutes(builder, commutes):
    PrimitiveInstanceAddCommutes(builder, commutes)

def PrimitiveInstanceStartCommutesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCommutesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartCommutesVector(builder, numElems)

def PrimitiveInstanceAddCoords(builder, coords):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(coords), 0)

def AddCoords(builder, coords):
    PrimitiveInstanceAddCoords(builder, coords)

def PrimitiveInstanceStartCoordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCoordsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartCoordsVector(builder, numElems)

def PrimitiveInstanceAddCounts(builder, counts):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(counts), 0)

def AddCounts(builder, counts):
    PrimitiveInstanceAddCounts(builder, counts)

def PrimitiveInstanceStartCountsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCountsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartCountsVector(builder, numElems)

def PrimitiveInstanceAddCstatus(builder, cstatus):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(cstatus), 0)

def AddCstatus(builder, cstatus):
    PrimitiveInstanceAddCstatus(builder, cstatus)

def PrimitiveInstanceStartCstatusVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCstatusVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartCstatusVector(builder, numElems)

def PrimitiveInstanceAddDargarray(builder, dargarray):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(dargarray), 0)

def AddDargarray(builder, dargarray):
    PrimitiveInstanceAddDargarray(builder, dargarray)

def PrimitiveInstanceStartDargarrayVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDargarrayVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartDargarrayVector(builder, numElems)

def PrimitiveInstanceAddDegrees(builder, degrees):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(degrees), 0)

def AddDegrees(builder, degrees):
    PrimitiveInstanceAddDegrees(builder, degrees)

def PrimitiveInstanceStartDegreesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDegreesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartDegreesVector(builder, numElems)

def PrimitiveInstanceAddDestinations(builder, destinations):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(destinations), 0)

def AddDestinations(builder, destinations):
    PrimitiveInstanceAddDestinations(builder, destinations)

def PrimitiveInstanceStartDestinationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDestinationsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartDestinationsVector(builder, numElems)

def PrimitiveInstanceAddDestweights(builder, destweights):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(destweights), 0)

def AddDestweights(builder, destweights):
    PrimitiveInstanceAddDestweights(builder, destweights)

def PrimitiveInstanceStartDestweightsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDestweightsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartDestweightsVector(builder, numElems)

def PrimitiveInstanceAddDims(builder, dims):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(dims), 0)

def AddDims(builder, dims):
    PrimitiveInstanceAddDims(builder, dims)

def PrimitiveInstanceStartDimsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartDimsVector(builder, numElems)

def PrimitiveInstanceAddDispls(builder, displs):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(displs), 0)

def AddDispls(builder, displs):
    PrimitiveInstanceAddDispls(builder, displs)

def PrimitiveInstanceStartDisplsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDisplsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartDisplsVector(builder, numElems)

def PrimitiveInstanceAddDispunits(builder, dispunits):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(dispunits), 0)

def AddDispunits(builder, dispunits):
    PrimitiveInstanceAddDispunits(builder, dispunits)

def PrimitiveInstanceStartDispunitsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDispunitsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartDispunitsVector(builder, numElems)

def PrimitiveInstanceAddDistribarray(builder, distribarray):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(distribarray), 0)

def AddDistribarray(builder, distribarray):
    PrimitiveInstanceAddDistribarray(builder, distribarray)

def PrimitiveInstanceStartDistribarrayVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDistribarrayVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartDistribarrayVector(builder, numElems)

def PrimitiveInstanceAddEdges(builder, edges):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(edges), 0)

def AddEdges(builder, edges):
    PrimitiveInstanceAddEdges(builder, edges)

def PrimitiveInstanceStartEdgesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEdgesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartEdgesVector(builder, numElems)

def PrimitiveInstanceAddErrorclasss(builder, errorclasss):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(errorclasss), 0)

def AddErrorclasss(builder, errorclasss):
    PrimitiveInstanceAddErrorclasss(builder, errorclasss)

def PrimitiveInstanceStartErrorclasssVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartErrorclasssVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartErrorclasssVector(builder, numElems)

def PrimitiveInstanceAddErrorcodes(builder, errorcodes):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(errorcodes), 0)

def AddErrorcodes(builder, errorcodes):
    PrimitiveInstanceAddErrorcodes(builder, errorcodes)

def PrimitiveInstanceStartErrorcodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartErrorcodesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartErrorcodesVector(builder, numElems)

def PrimitiveInstanceAddExtent(builder, extent):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(extent), 0)

def AddExtent(builder, extent):
    PrimitiveInstanceAddExtent(builder, extent)

def PrimitiveInstanceStartExtentVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartExtentVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartExtentVector(builder, numElems)

def PrimitiveInstanceAddFlags(builder, flags):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(flags), 0)

def AddFlags(builder, flags):
    PrimitiveInstanceAddFlags(builder, flags)

def PrimitiveInstanceStartFlagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFlagsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartFlagsVector(builder, numElems)

def PrimitiveInstanceAddFstatus(builder, fstatus):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(fstatus), 0)

def AddFstatus(builder, fstatus):
    PrimitiveInstanceAddFstatus(builder, fstatus)

def PrimitiveInstanceStartFstatusVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFstatusVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartFstatusVector(builder, numElems)

def PrimitiveInstanceAddGroups(builder, groups):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)

def AddGroups(builder, groups):
    PrimitiveInstanceAddGroups(builder, groups)

def PrimitiveInstanceStartGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGroupsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartGroupsVector(builder, numElems)

def PrimitiveInstanceAddGsizearray(builder, gsizearray):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(gsizearray), 0)

def AddGsizearray(builder, gsizearray):
    PrimitiveInstanceAddGsizearray(builder, gsizearray)

def PrimitiveInstanceStartGsizearrayVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGsizearrayVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartGsizearrayVector(builder, numElems)

def PrimitiveInstanceAddIndex(builder, index):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(index), 0)

def AddIndex(builder, index):
    PrimitiveInstanceAddIndex(builder, index)

def PrimitiveInstanceStartIndexVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIndexVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartIndexVector(builder, numElems)

def PrimitiveInstanceAddInneighbors(builder, inneighbors):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(inneighbors), 0)

def AddInneighbors(builder, inneighbors):
    PrimitiveInstanceAddInneighbors(builder, inneighbors)

def PrimitiveInstanceStartInneighborsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInneighborsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartInneighborsVector(builder, numElems)

def PrimitiveInstanceAddIntercomms(builder, intercomms):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(intercomms), 0)

def AddIntercomms(builder, intercomms):
    PrimitiveInstanceAddIntercomms(builder, intercomms)

def PrimitiveInstanceStartIntercommsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIntercommsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartIntercommsVector(builder, numElems)

def PrimitiveInstanceAddLb(builder, lb):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(lb), 0)

def AddLb(builder, lb):
    PrimitiveInstanceAddLb(builder, lb)

def PrimitiveInstanceStartLbVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLbVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartLbVector(builder, numElems)

def PrimitiveInstanceAddMessages(builder, messages):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(messages), 0)

def AddMessages(builder, messages):
    PrimitiveInstanceAddMessages(builder, messages)

def PrimitiveInstanceStartMessagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMessagesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartMessagesVector(builder, numElems)

def PrimitiveInstanceAddNdimss(builder, ndimss):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(ndimss), 0)

def AddNdimss(builder, ndimss):
    PrimitiveInstanceAddNdimss(builder, ndimss)

def PrimitiveInstanceStartNdimssVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNdimssVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNdimssVector(builder, numElems)

def PrimitiveInstanceAddNedges(builder, nedges):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(nedges), 0)

def AddNedges(builder, nedges):
    PrimitiveInstanceAddNedges(builder, nedges)

def PrimitiveInstanceStartNedgesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNedgesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNedgesVector(builder, numElems)

def PrimitiveInstanceAddNeighbors(builder, neighbors):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(neighbors), 0)

def AddNeighbors(builder, neighbors):
    PrimitiveInstanceAddNeighbors(builder, neighbors)

def PrimitiveInstanceStartNeighborsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNeighborsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNeighborsVector(builder, numElems)

def PrimitiveInstanceAddNewcomm(builder, newcomm):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(newcomm), 0)

def AddNewcomm(builder, newcomm):
    PrimitiveInstanceAddNewcomm(builder, newcomm)

def PrimitiveInstanceStartNewcommVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNewcommVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNewcommVector(builder, numElems)

def PrimitiveInstanceAddNewgroup(builder, newgroup):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(newgroup), 0)

def AddNewgroup(builder, newgroup):
    PrimitiveInstanceAddNewgroup(builder, newgroup)

def PrimitiveInstanceStartNewgroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNewgroupVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNewgroupVector(builder, numElems)

def PrimitiveInstanceAddNewintercomm(builder, newintercomm):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(newintercomm), 0)

def AddNewintercomm(builder, newintercomm):
    PrimitiveInstanceAddNewintercomm(builder, newintercomm)

def PrimitiveInstanceStartNewintercommVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNewintercommVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNewintercommVector(builder, numElems)

def PrimitiveInstanceAddNewrank(builder, newrank):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(newrank), 0)

def AddNewrank(builder, newrank):
    PrimitiveInstanceAddNewrank(builder, newrank)

def PrimitiveInstanceStartNewrankVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNewrankVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNewrankVector(builder, numElems)

def PrimitiveInstanceAddNkeys(builder, nkeys):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(nkeys), 0)

def AddNkeys(builder, nkeys):
    PrimitiveInstanceAddNkeys(builder, nkeys)

def PrimitiveInstanceStartNkeysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNkeysVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNkeysVector(builder, numElems)

def PrimitiveInstanceAddNneighbors(builder, nneighbors):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(nneighbors), 0)

def AddNneighbors(builder, nneighbors):
    PrimitiveInstanceAddNneighbors(builder, nneighbors)

def PrimitiveInstanceStartNneighborsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNneighborsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNneighborsVector(builder, numElems)

def PrimitiveInstanceAddNnodess(builder, nnodess):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(nnodess), 0)

def AddNnodess(builder, nnodess):
    PrimitiveInstanceAddNnodess(builder, nnodess)

def PrimitiveInstanceStartNnodessVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNnodessVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNnodessVector(builder, numElems)

def PrimitiveInstanceAddNodes(builder, nodes):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)

def AddNodes(builder, nodes):
    PrimitiveInstanceAddNodes(builder, nodes)

def PrimitiveInstanceStartNodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNodesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNodesVector(builder, numElems)

def PrimitiveInstanceAddNumaddresses(builder, numaddresses):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(numaddresses), 0)

def AddNumaddresses(builder, numaddresses):
    PrimitiveInstanceAddNumaddresses(builder, numaddresses)

def PrimitiveInstanceStartNumaddressesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNumaddressesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNumaddressesVector(builder, numElems)

def PrimitiveInstanceAddNumdatatypes(builder, numdatatypes):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(numdatatypes), 0)

def AddNumdatatypes(builder, numdatatypes):
    PrimitiveInstanceAddNumdatatypes(builder, numdatatypes)

def PrimitiveInstanceStartNumdatatypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNumdatatypesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNumdatatypesVector(builder, numElems)

def PrimitiveInstanceAddNumintegers(builder, numintegers):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(numintegers), 0)

def AddNumintegers(builder, numintegers):
    PrimitiveInstanceAddNumintegers(builder, numintegers)

def PrimitiveInstanceStartNumintegersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNumintegersVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartNumintegersVector(builder, numElems)

def PrimitiveInstanceAddOutcounts(builder, outcounts):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(outcounts), 0)

def AddOutcounts(builder, outcounts):
    PrimitiveInstanceAddOutcounts(builder, outcounts)

def PrimitiveInstanceStartOutcountsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOutcountsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartOutcountsVector(builder, numElems)

def PrimitiveInstanceAddOutneighbors(builder, outneighbors):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(outneighbors), 0)

def AddOutneighbors(builder, outneighbors):
    PrimitiveInstanceAddOutneighbors(builder, outneighbors)

def PrimitiveInstanceStartOutneighborsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOutneighborsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartOutneighborsVector(builder, numElems)

def PrimitiveInstanceAddParent(builder, parent):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(parent), 0)

def AddParent(builder, parent):
    PrimitiveInstanceAddParent(builder, parent)

def PrimitiveInstanceStartParentVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartParentVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartParentVector(builder, numElems)

def PrimitiveInstanceAddPeriods(builder, periods):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(periods), 0)

def AddPeriods(builder, periods):
    PrimitiveInstanceAddPeriods(builder, periods)

def PrimitiveInstanceStartPeriodsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPeriodsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartPeriodsVector(builder, numElems)

def PrimitiveInstanceAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    PrimitiveInstanceAddPosition(builder, position)

def PrimitiveInstanceStartPositionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPositionVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartPositionVector(builder, numElems)

def PrimitiveInstanceAddProvided(builder, provided):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(provided), 0)

def AddProvided(builder, provided):
    PrimitiveInstanceAddProvided(builder, provided)

def PrimitiveInstanceStartProvidedVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartProvidedVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartProvidedVector(builder, numElems)

def PrimitiveInstanceAddPsizearray(builder, psizearray):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(psizearray), 0)

def AddPsizearray(builder, psizearray):
    PrimitiveInstanceAddPsizearray(builder, psizearray)

def PrimitiveInstanceStartPsizearrayVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPsizearrayVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartPsizearrayVector(builder, numElems)

def PrimitiveInstanceAddRanks(builder, ranks):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(ranks), 0)

def AddRanks(builder, ranks):
    PrimitiveInstanceAddRanks(builder, ranks)

def PrimitiveInstanceStartRanksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRanksVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartRanksVector(builder, numElems)

def PrimitiveInstanceAddRankdest(builder, rankdest):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(rankdest), 0)

def AddRankdest(builder, rankdest):
    PrimitiveInstanceAddRankdest(builder, rankdest)

def PrimitiveInstanceStartRankdestVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRankdestVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartRankdestVector(builder, numElems)

def PrimitiveInstanceAddRankss(builder, rankss):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(rankss), 0)

def AddRankss(builder, rankss):
    PrimitiveInstanceAddRankss(builder, rankss)

def PrimitiveInstanceStartRankssVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRankssVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartRankssVector(builder, numElems)

def PrimitiveInstanceAddRanks1(builder, ranks1):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(ranks1), 0)

def AddRanks1(builder, ranks1):
    PrimitiveInstanceAddRanks1(builder, ranks1)

def PrimitiveInstanceStartRanks1Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRanks1Vector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartRanks1Vector(builder, numElems)

def PrimitiveInstanceAddRanks2(builder, ranks2):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(ranks2), 0)

def AddRanks2(builder, ranks2):
    PrimitiveInstanceAddRanks2(builder, ranks2)

def PrimitiveInstanceStartRanks2Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRanks2Vector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartRanks2Vector(builder, numElems)

def PrimitiveInstanceAddRanksource(builder, ranksource):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(ranksource), 0)

def AddRanksource(builder, ranksource):
    PrimitiveInstanceAddRanksource(builder, ranksource)

def PrimitiveInstanceStartRanksourceVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRanksourceVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartRanksourceVector(builder, numElems)

def PrimitiveInstanceAddRdispls(builder, rdispls):
    builder.PrependUOffsetTRelativeSlot(69, flatbuffers.number_types.UOffsetTFlags.py_type(rdispls), 0)

def AddRdispls(builder, rdispls):
    PrimitiveInstanceAddRdispls(builder, rdispls)

def PrimitiveInstanceStartRdisplsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRdisplsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartRdisplsVector(builder, numElems)

def PrimitiveInstanceAddRecvcounts(builder, recvcounts):
    builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(recvcounts), 0)

def AddRecvcounts(builder, recvcounts):
    PrimitiveInstanceAddRecvcounts(builder, recvcounts)

def PrimitiveInstanceStartRecvcountsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRecvcountsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartRecvcountsVector(builder, numElems)

def PrimitiveInstanceAddRemaindims(builder, remaindims):
    builder.PrependUOffsetTRelativeSlot(71, flatbuffers.number_types.UOffsetTFlags.py_type(remaindims), 0)

def AddRemaindims(builder, remaindims):
    PrimitiveInstanceAddRemaindims(builder, remaindims)

def PrimitiveInstanceStartRemaindimsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRemaindimsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartRemaindimsVector(builder, numElems)

def PrimitiveInstanceAddRequests(builder, requests):
    builder.PrependUOffsetTRelativeSlot(72, flatbuffers.number_types.UOffsetTFlags.py_type(requests), 0)

def AddRequests(builder, requests):
    PrimitiveInstanceAddRequests(builder, requests)

def PrimitiveInstanceStartRequestsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRequestsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartRequestsVector(builder, numElems)

def PrimitiveInstanceAddResult(builder, result):
    builder.PrependUOffsetTRelativeSlot(73, flatbuffers.number_types.UOffsetTFlags.py_type(result), 0)

def AddResult(builder, result):
    PrimitiveInstanceAddResult(builder, result)

def PrimitiveInstanceStartResultVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartResultVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartResultVector(builder, numElems)

def PrimitiveInstanceAddResultlen(builder, resultlen):
    builder.PrependUOffsetTRelativeSlot(74, flatbuffers.number_types.UOffsetTFlags.py_type(resultlen), 0)

def AddResultlen(builder, resultlen):
    PrimitiveInstanceAddResultlen(builder, resultlen)

def PrimitiveInstanceStartResultlenVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartResultlenVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartResultlenVector(builder, numElems)

def PrimitiveInstanceAddSdispls(builder, sdispls):
    builder.PrependUOffsetTRelativeSlot(75, flatbuffers.number_types.UOffsetTFlags.py_type(sdispls), 0)

def AddSdispls(builder, sdispls):
    PrimitiveInstanceAddSdispls(builder, sdispls)

def PrimitiveInstanceStartSdisplsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSdisplsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartSdisplsVector(builder, numElems)

def PrimitiveInstanceAddSendcounts(builder, sendcounts):
    builder.PrependUOffsetTRelativeSlot(76, flatbuffers.number_types.UOffsetTFlags.py_type(sendcounts), 0)

def AddSendcounts(builder, sendcounts):
    PrimitiveInstanceAddSendcounts(builder, sendcounts)

def PrimitiveInstanceStartSendcountsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSendcountsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartSendcountsVector(builder, numElems)

def PrimitiveInstanceAddSizes(builder, sizes):
    builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(sizes), 0)

def AddSizes(builder, sizes):
    PrimitiveInstanceAddSizes(builder, sizes)

def PrimitiveInstanceStartSizesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSizesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartSizesVector(builder, numElems)

def PrimitiveInstanceAddSizearray(builder, sizearray):
    builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(sizearray), 0)

def AddSizearray(builder, sizearray):
    PrimitiveInstanceAddSizearray(builder, sizearray)

def PrimitiveInstanceStartSizearrayVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSizearrayVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartSizearrayVector(builder, numElems)

def PrimitiveInstanceAddSources(builder, sources):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(sources), 0)

def AddSources(builder, sources):
    PrimitiveInstanceAddSources(builder, sources)

def PrimitiveInstanceStartSourcesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSourcesVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartSourcesVector(builder, numElems)

def PrimitiveInstanceAddSourceweights(builder, sourceweights):
    builder.PrependUOffsetTRelativeSlot(80, flatbuffers.number_types.UOffsetTFlags.py_type(sourceweights), 0)

def AddSourceweights(builder, sourceweights):
    PrimitiveInstanceAddSourceweights(builder, sourceweights)

def PrimitiveInstanceStartSourceweightsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSourceweightsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartSourceweightsVector(builder, numElems)

def PrimitiveInstanceAddStartarray(builder, startarray):
    builder.PrependUOffsetTRelativeSlot(81, flatbuffers.number_types.UOffsetTFlags.py_type(startarray), 0)

def AddStartarray(builder, startarray):
    PrimitiveInstanceAddStartarray(builder, startarray)

def PrimitiveInstanceStartStartarrayVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStartarrayVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartStartarrayVector(builder, numElems)

def PrimitiveInstanceAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(82, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    PrimitiveInstanceAddStatus(builder, status)

def PrimitiveInstanceStartStatusVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStatusVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartStatusVector(builder, numElems)

def PrimitiveInstanceAddSubsizearray(builder, subsizearray):
    builder.PrependUOffsetTRelativeSlot(83, flatbuffers.number_types.UOffsetTFlags.py_type(subsizearray), 0)

def AddSubsizearray(builder, subsizearray):
    PrimitiveInstanceAddSubsizearray(builder, subsizearray)

def PrimitiveInstanceStartSubsizearrayVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSubsizearrayVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartSubsizearrayVector(builder, numElems)

def PrimitiveInstanceAddSubversion(builder, subversion):
    builder.PrependUOffsetTRelativeSlot(84, flatbuffers.number_types.UOffsetTFlags.py_type(subversion), 0)

def AddSubversion(builder, subversion):
    PrimitiveInstanceAddSubversion(builder, subversion)

def PrimitiveInstanceStartSubversionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSubversionVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartSubversionVector(builder, numElems)

def PrimitiveInstanceAddTargets(builder, targets):
    builder.PrependUOffsetTRelativeSlot(85, flatbuffers.number_types.UOffsetTFlags.py_type(targets), 0)

def AddTargets(builder, targets):
    PrimitiveInstanceAddTargets(builder, targets)

def PrimitiveInstanceStartTargetsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTargetsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartTargetsVector(builder, numElems)

def PrimitiveInstanceAddTrueextent(builder, trueextent):
    builder.PrependUOffsetTRelativeSlot(86, flatbuffers.number_types.UOffsetTFlags.py_type(trueextent), 0)

def AddTrueextent(builder, trueextent):
    PrimitiveInstanceAddTrueextent(builder, trueextent)

def PrimitiveInstanceStartTrueextentVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTrueextentVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartTrueextentVector(builder, numElems)

def PrimitiveInstanceAddTruelb(builder, truelb):
    builder.PrependUOffsetTRelativeSlot(87, flatbuffers.number_types.UOffsetTFlags.py_type(truelb), 0)

def AddTruelb(builder, truelb):
    PrimitiveInstanceAddTruelb(builder, truelb)

def PrimitiveInstanceStartTruelbVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTruelbVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartTruelbVector(builder, numElems)

def PrimitiveInstanceAddTypekeyvals(builder, typekeyvals):
    builder.PrependUOffsetTRelativeSlot(88, flatbuffers.number_types.UOffsetTFlags.py_type(typekeyvals), 0)

def AddTypekeyvals(builder, typekeyvals):
    PrimitiveInstanceAddTypekeyvals(builder, typekeyvals)

def PrimitiveInstanceStartTypekeyvalsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTypekeyvalsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartTypekeyvalsVector(builder, numElems)

def PrimitiveInstanceAddVersion(builder, version):
    builder.PrependUOffsetTRelativeSlot(89, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)

def AddVersion(builder, version):
    PrimitiveInstanceAddVersion(builder, version)

def PrimitiveInstanceStartVersionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVersionVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartVersionVector(builder, numElems)

def PrimitiveInstanceAddWeighted(builder, weighted):
    builder.PrependUOffsetTRelativeSlot(90, flatbuffers.number_types.UOffsetTFlags.py_type(weighted), 0)

def AddWeighted(builder, weighted):
    PrimitiveInstanceAddWeighted(builder, weighted)

def PrimitiveInstanceStartWeightedVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartWeightedVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartWeightedVector(builder, numElems)

def PrimitiveInstanceAddWeights(builder, weights):
    builder.PrependUOffsetTRelativeSlot(91, flatbuffers.number_types.UOffsetTFlags.py_type(weights), 0)

def AddWeights(builder, weights):
    PrimitiveInstanceAddWeights(builder, weights)

def PrimitiveInstanceStartWeightsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartWeightsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartWeightsVector(builder, numElems)

def PrimitiveInstanceAddWinkeyvals(builder, winkeyvals):
    builder.PrependUOffsetTRelativeSlot(92, flatbuffers.number_types.UOffsetTFlags.py_type(winkeyvals), 0)

def AddWinkeyvals(builder, winkeyvals):
    PrimitiveInstanceAddWinkeyvals(builder, winkeyvals)

def PrimitiveInstanceStartWinkeyvalsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartWinkeyvalsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartWinkeyvalsVector(builder, numElems)

def PrimitiveInstanceAddArgv(builder, argv):
    builder.PrependUOffsetTRelativeSlot(93, flatbuffers.number_types.UOffsetTFlags.py_type(argv), 0)

def AddArgv(builder, argv):
    PrimitiveInstanceAddArgv(builder, argv)

def PrimitiveInstanceStartArgvVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArgvVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArgvVector(builder, numElems)

def PrimitiveInstanceAddArrayofargv(builder, arrayofargv):
    builder.PrependUOffsetTRelativeSlot(94, flatbuffers.number_types.UOffsetTFlags.py_type(arrayofargv), 0)

def AddArrayofargv(builder, arrayofargv):
    PrimitiveInstanceAddArrayofargv(builder, arrayofargv)

def PrimitiveInstanceStartArrayofargvVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArrayofargvVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArrayofargvVector(builder, numElems)

def PrimitiveInstanceAddArrayofcommands(builder, arrayofcommands):
    builder.PrependUOffsetTRelativeSlot(95, flatbuffers.number_types.UOffsetTFlags.py_type(arrayofcommands), 0)

def AddArrayofcommands(builder, arrayofcommands):
    PrimitiveInstanceAddArrayofcommands(builder, arrayofcommands)

def PrimitiveInstanceStartArrayofcommandsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArrayofcommandsVector(builder, numElems: int) -> int:
    return PrimitiveInstanceStartArrayofcommandsVector(builder, numElems)

def PrimitiveInstanceAddAmode(builder, amode):
    builder.PrependInt32Slot(96, amode, 0)

def AddAmode(builder, amode):
    PrimitiveInstanceAddAmode(builder, amode)

def PrimitiveInstanceAddBlocklength(builder, blocklength):
    builder.PrependInt32Slot(97, blocklength, 0)

def AddBlocklength(builder, blocklength):
    PrimitiveInstanceAddBlocklength(builder, blocklength)

def PrimitiveInstanceAddBridgecomm(builder, bridgecomm):
    builder.PrependInt32Slot(98, bridgecomm, 0)

def AddBridgecomm(builder, bridgecomm):
    PrimitiveInstanceAddBridgecomm(builder, bridgecomm)

def PrimitiveInstanceAddColor(builder, color):
    builder.PrependInt32Slot(99, color, 0)

def AddColor(builder, color):
    PrimitiveInstanceAddColor(builder, color)

def PrimitiveInstanceAddComm(builder, comm):
    builder.PrependInt32Slot(100, comm, 0)

def AddComm(builder, comm):
    PrimitiveInstanceAddComm(builder, comm)

def PrimitiveInstanceAddComm1(builder, comm1):
    builder.PrependInt32Slot(101, comm1, 0)

def AddComm1(builder, comm1):
    PrimitiveInstanceAddComm1(builder, comm1)

def PrimitiveInstanceAddComm2(builder, comm2):
    builder.PrependInt32Slot(102, comm2, 0)

def AddComm2(builder, comm2):
    PrimitiveInstanceAddComm2(builder, comm2)

def PrimitiveInstanceAddCommkeyval(builder, commkeyval):
    builder.PrependInt32Slot(103, commkeyval, 0)

def AddCommkeyval(builder, commkeyval):
    PrimitiveInstanceAddCommkeyval(builder, commkeyval)

def PrimitiveInstanceAddCommold(builder, commold):
    builder.PrependInt32Slot(104, commold, 0)

def AddCommold(builder, commold):
    PrimitiveInstanceAddCommold(builder, commold)

def PrimitiveInstanceAddCommute(builder, commute):
    builder.PrependInt32Slot(105, commute, 0)

def AddCommute(builder, commute):
    PrimitiveInstanceAddCommute(builder, commute)

def PrimitiveInstanceAddCount(builder, count):
    builder.PrependInt32Slot(106, count, 0)

def AddCount(builder, count):
    PrimitiveInstanceAddCount(builder, count)

def PrimitiveInstanceAddDatatype(builder, datatype):
    builder.PrependInt32Slot(107, datatype, 0)

def AddDatatype(builder, datatype):
    PrimitiveInstanceAddDatatype(builder, datatype)

def PrimitiveInstanceAddDest(builder, dest):
    builder.PrependInt32Slot(108, dest, 0)

def AddDest(builder, dest):
    PrimitiveInstanceAddDest(builder, dest)

def PrimitiveInstanceAddDirection(builder, direction):
    builder.PrependInt32Slot(109, direction, 0)

def AddDirection(builder, direction):
    PrimitiveInstanceAddDirection(builder, direction)

def PrimitiveInstanceAddDisp(builder, disp):
    builder.PrependInt32Slot(110, disp, 0)

def AddDisp(builder, disp):
    PrimitiveInstanceAddDisp(builder, disp)

def PrimitiveInstanceAddDispunit(builder, dispunit):
    builder.PrependInt32Slot(111, dispunit, 0)

def AddDispunit(builder, dispunit):
    PrimitiveInstanceAddDispunit(builder, dispunit)

def PrimitiveInstanceAddErhandler(builder, erhandler):
    builder.PrependInt32Slot(112, erhandler, 0)

def AddErhandler(builder, erhandler):
    PrimitiveInstanceAddErhandler(builder, erhandler)

def PrimitiveInstanceAddErrhandler(builder, errhandler):
    builder.PrependInt32Slot(113, errhandler, 0)

def AddErrhandler(builder, errhandler):
    PrimitiveInstanceAddErrhandler(builder, errhandler)

def PrimitiveInstanceAddErrorclass(builder, errorclass):
    builder.PrependInt32Slot(114, errorclass, 0)

def AddErrorclass(builder, errorclass):
    PrimitiveInstanceAddErrorclass(builder, errorclass)

def PrimitiveInstanceAddErrorcode(builder, errorcode):
    builder.PrependInt32Slot(115, errorcode, 0)

def AddErrorcode(builder, errorcode):
    PrimitiveInstanceAddErrorcode(builder, errorcode)

def PrimitiveInstanceAddFd(builder, fd):
    builder.PrependInt32Slot(116, fd, 0)

def AddFd(builder, fd):
    PrimitiveInstanceAddFd(builder, fd)

def PrimitiveInstanceAddFh(builder, fh):
    builder.PrependInt32Slot(117, fh, 0)

def AddFh(builder, fh):
    PrimitiveInstanceAddFh(builder, fh)

def PrimitiveInstanceAddFile(builder, file):
    builder.PrependInt32Slot(118, file, 0)

def AddFile(builder, file):
    PrimitiveInstanceAddFile(builder, file)

def PrimitiveInstanceAddFlag(builder, flag):
    builder.PrependInt32Slot(119, flag, 0)

def AddFlag(builder, flag):
    PrimitiveInstanceAddFlag(builder, flag)

def PrimitiveInstanceAddGroup(builder, group):
    builder.PrependInt32Slot(120, group, 0)

def AddGroup(builder, group):
    PrimitiveInstanceAddGroup(builder, group)

def PrimitiveInstanceAddGroup1(builder, group1):
    builder.PrependInt32Slot(121, group1, 0)

def AddGroup1(builder, group1):
    PrimitiveInstanceAddGroup1(builder, group1)

def PrimitiveInstanceAddGroup2(builder, group2):
    builder.PrependInt32Slot(122, group2, 0)

def AddGroup2(builder, group2):
    PrimitiveInstanceAddGroup2(builder, group2)

def PrimitiveInstanceAddHigh(builder, high):
    builder.PrependInt32Slot(123, high, 0)

def AddHigh(builder, high):
    PrimitiveInstanceAddHigh(builder, high)

def PrimitiveInstanceAddIncount(builder, incount):
    builder.PrependInt32Slot(124, incount, 0)

def AddIncount(builder, incount):
    PrimitiveInstanceAddIncount(builder, incount)

def PrimitiveInstanceAddIndegree(builder, indegree):
    builder.PrependInt32Slot(125, indegree, 0)

def AddIndegree(builder, indegree):
    PrimitiveInstanceAddIndegree(builder, indegree)

def PrimitiveInstanceAddInfo(builder, info):
    builder.PrependInt32Slot(126, info, 0)

def AddInfo(builder, info):
    PrimitiveInstanceAddInfo(builder, info)

def PrimitiveInstanceAddInfoused(builder, infoused):
    builder.PrependInt32Slot(127, infoused, 0)

def AddInfoused(builder, infoused):
    PrimitiveInstanceAddInfoused(builder, infoused)

def PrimitiveInstanceAddInsize(builder, insize):
    builder.PrependInt32Slot(128, insize, 0)

def AddInsize(builder, insize):
    PrimitiveInstanceAddInsize(builder, insize)

def PrimitiveInstanceAddIntercomm(builder, intercomm):
    builder.PrependInt32Slot(129, intercomm, 0)

def AddIntercomm(builder, intercomm):
    PrimitiveInstanceAddIntercomm(builder, intercomm)

def PrimitiveInstanceAddKey(builder, key):
    builder.PrependInt32Slot(130, key, 0)

def AddKey(builder, key):
    PrimitiveInstanceAddKey(builder, key)

def PrimitiveInstanceAddLocalcomm(builder, localcomm):
    builder.PrependInt32Slot(131, localcomm, 0)

def AddLocalcomm(builder, localcomm):
    PrimitiveInstanceAddLocalcomm(builder, localcomm)

def PrimitiveInstanceAddLocalleader(builder, localleader):
    builder.PrependInt32Slot(132, localleader, 0)

def AddLocalleader(builder, localleader):
    PrimitiveInstanceAddLocalleader(builder, localleader)

def PrimitiveInstanceAddLocktype(builder, locktype):
    builder.PrependInt32Slot(133, locktype, 0)

def AddLocktype(builder, locktype):
    PrimitiveInstanceAddLocktype(builder, locktype)

def PrimitiveInstanceAddMaxaddresses(builder, maxaddresses):
    builder.PrependInt32Slot(134, maxaddresses, 0)

def AddMaxaddresses(builder, maxaddresses):
    PrimitiveInstanceAddMaxaddresses(builder, maxaddresses)

def PrimitiveInstanceAddMaxdatatypes(builder, maxdatatypes):
    builder.PrependInt32Slot(135, maxdatatypes, 0)

def AddMaxdatatypes(builder, maxdatatypes):
    PrimitiveInstanceAddMaxdatatypes(builder, maxdatatypes)

def PrimitiveInstanceAddMaxdims(builder, maxdims):
    builder.PrependInt32Slot(136, maxdims, 0)

def AddMaxdims(builder, maxdims):
    PrimitiveInstanceAddMaxdims(builder, maxdims)

def PrimitiveInstanceAddMaxedges(builder, maxedges):
    builder.PrependInt32Slot(137, maxedges, 0)

def AddMaxedges(builder, maxedges):
    PrimitiveInstanceAddMaxedges(builder, maxedges)

def PrimitiveInstanceAddMaxindegree(builder, maxindegree):
    builder.PrependInt32Slot(138, maxindegree, 0)

def AddMaxindegree(builder, maxindegree):
    PrimitiveInstanceAddMaxindegree(builder, maxindegree)

def PrimitiveInstanceAddMaxindex(builder, maxindex):
    builder.PrependInt32Slot(139, maxindex, 0)

def AddMaxindex(builder, maxindex):
    PrimitiveInstanceAddMaxindex(builder, maxindex)

def PrimitiveInstanceAddMaxintegers(builder, maxintegers):
    builder.PrependInt32Slot(140, maxintegers, 0)

def AddMaxintegers(builder, maxintegers):
    PrimitiveInstanceAddMaxintegers(builder, maxintegers)

def PrimitiveInstanceAddMaxneighbors(builder, maxneighbors):
    builder.PrependInt32Slot(141, maxneighbors, 0)

def AddMaxneighbors(builder, maxneighbors):
    PrimitiveInstanceAddMaxneighbors(builder, maxneighbors)

def PrimitiveInstanceAddMaxoutdegree(builder, maxoutdegree):
    builder.PrependInt32Slot(142, maxoutdegree, 0)

def AddMaxoutdegree(builder, maxoutdegree):
    PrimitiveInstanceAddMaxoutdegree(builder, maxoutdegree)

def PrimitiveInstanceAddMaxprocs(builder, maxprocs):
    builder.PrependInt32Slot(143, maxprocs, 0)

def AddMaxprocs(builder, maxprocs):
    PrimitiveInstanceAddMaxprocs(builder, maxprocs)

def PrimitiveInstanceAddMessage(builder, message):
    builder.PrependInt32Slot(144, message, 0)

def AddMessage(builder, message):
    PrimitiveInstanceAddMessage(builder, message)

def PrimitiveInstanceAddMpiassert(builder, mpiassert):
    builder.PrependInt32Slot(145, mpiassert, 0)

def AddMpiassert(builder, mpiassert):
    PrimitiveInstanceAddMpiassert(builder, mpiassert)

def PrimitiveInstanceAddN(builder, n):
    builder.PrependInt32Slot(146, n, 0)

def AddN(builder, n):
    PrimitiveInstanceAddN(builder, n)

def PrimitiveInstanceAddNdims(builder, ndims):
    builder.PrependInt32Slot(147, ndims, 0)

def AddNdims(builder, ndims):
    PrimitiveInstanceAddNdims(builder, ndims)

def PrimitiveInstanceAddNewinfo(builder, newinfo):
    builder.PrependInt32Slot(148, newinfo, 0)

def AddNewinfo(builder, newinfo):
    PrimitiveInstanceAddNewinfo(builder, newinfo)

def PrimitiveInstanceAddNnodes(builder, nnodes):
    builder.PrependInt32Slot(149, nnodes, 0)

def AddNnodes(builder, nnodes):
    PrimitiveInstanceAddNnodes(builder, nnodes)

def PrimitiveInstanceAddOldcomm(builder, oldcomm):
    builder.PrependInt32Slot(150, oldcomm, 0)

def AddOldcomm(builder, oldcomm):
    PrimitiveInstanceAddOldcomm(builder, oldcomm)

def PrimitiveInstanceAddOp(builder, op):
    builder.PrependInt32Slot(151, op, 0)

def AddOp(builder, op):
    PrimitiveInstanceAddOp(builder, op)

def PrimitiveInstanceAddOrder(builder, order):
    builder.PrependInt32Slot(152, order, 0)

def AddOrder(builder, order):
    PrimitiveInstanceAddOrder(builder, order)

def PrimitiveInstanceAddOrigincount(builder, origincount):
    builder.PrependInt32Slot(153, origincount, 0)

def AddOrigincount(builder, origincount):
    PrimitiveInstanceAddOrigincount(builder, origincount)

def PrimitiveInstanceAddOutcount(builder, outcount):
    builder.PrependInt32Slot(154, outcount, 0)

def AddOutcount(builder, outcount):
    PrimitiveInstanceAddOutcount(builder, outcount)

def PrimitiveInstanceAddOutdegree(builder, outdegree):
    builder.PrependInt32Slot(155, outdegree, 0)

def AddOutdegree(builder, outdegree):
    PrimitiveInstanceAddOutdegree(builder, outdegree)

def PrimitiveInstanceAddOutsize(builder, outsize):
    builder.PrependInt32Slot(156, outsize, 0)

def AddOutsize(builder, outsize):
    PrimitiveInstanceAddOutsize(builder, outsize)

def PrimitiveInstanceAddP(builder, p):
    builder.PrependInt32Slot(157, p, 0)

def AddP(builder, p):
    PrimitiveInstanceAddP(builder, p)

def PrimitiveInstanceAddR(builder, r):
    builder.PrependInt32Slot(158, r, 0)

def AddR(builder, r):
    PrimitiveInstanceAddR(builder, r)

def PrimitiveInstanceAddRank(builder, rank):
    builder.PrependInt32Slot(159, rank, 0)

def AddRank(builder, rank):
    PrimitiveInstanceAddRank(builder, rank)

def PrimitiveInstanceAddRecvcount(builder, recvcount):
    builder.PrependInt32Slot(160, recvcount, 0)

def AddRecvcount(builder, recvcount):
    PrimitiveInstanceAddRecvcount(builder, recvcount)

def PrimitiveInstanceAddRecvtag(builder, recvtag):
    builder.PrependInt32Slot(161, recvtag, 0)

def AddRecvtag(builder, recvtag):
    PrimitiveInstanceAddRecvtag(builder, recvtag)

def PrimitiveInstanceAddRemoteleader(builder, remoteleader):
    builder.PrependInt32Slot(162, remoteleader, 0)

def AddRemoteleader(builder, remoteleader):
    PrimitiveInstanceAddRemoteleader(builder, remoteleader)

def PrimitiveInstanceAddReorder(builder, reorder):
    builder.PrependInt32Slot(163, reorder, 0)

def AddReorder(builder, reorder):
    PrimitiveInstanceAddReorder(builder, reorder)

def PrimitiveInstanceAddRequest(builder, request):
    builder.PrependInt32Slot(164, request, 0)

def AddRequest(builder, request):
    PrimitiveInstanceAddRequest(builder, request)

def PrimitiveInstanceAddResultcount(builder, resultcount):
    builder.PrependInt32Slot(165, resultcount, 0)

def AddResultcount(builder, resultcount):
    PrimitiveInstanceAddResultcount(builder, resultcount)

def PrimitiveInstanceAddRoot(builder, root):
    builder.PrependInt32Slot(166, root, 0)

def AddRoot(builder, root):
    PrimitiveInstanceAddRoot(builder, root)

def PrimitiveInstanceAddSendcount(builder, sendcount):
    builder.PrependInt32Slot(167, sendcount, 0)

def AddSendcount(builder, sendcount):
    PrimitiveInstanceAddSendcount(builder, sendcount)

def PrimitiveInstanceAddSendtag(builder, sendtag):
    builder.PrependInt32Slot(168, sendtag, 0)

def AddSendtag(builder, sendtag):
    PrimitiveInstanceAddSendtag(builder, sendtag)

def PrimitiveInstanceAddSize(builder, size):
    builder.PrependInt32Slot(169, size, 0)

def AddSize(builder, size):
    PrimitiveInstanceAddSize(builder, size)

def PrimitiveInstanceAddSource(builder, source):
    builder.PrependInt32Slot(170, source, 0)

def AddSource(builder, source):
    PrimitiveInstanceAddSource(builder, source)

def PrimitiveInstanceAddSplittype(builder, splittype):
    builder.PrependInt32Slot(171, splittype, 0)

def AddSplittype(builder, splittype):
    PrimitiveInstanceAddSplittype(builder, splittype)

def PrimitiveInstanceAddStride(builder, stride):
    builder.PrependInt32Slot(172, stride, 0)

def AddStride(builder, stride):
    PrimitiveInstanceAddStride(builder, stride)

def PrimitiveInstanceAddTag(builder, tag):
    builder.PrependInt32Slot(173, tag, 0)

def AddTag(builder, tag):
    PrimitiveInstanceAddTag(builder, tag)

def PrimitiveInstanceAddTargetcount(builder, targetcount):
    builder.PrependInt32Slot(174, targetcount, 0)

def AddTargetcount(builder, targetcount):
    PrimitiveInstanceAddTargetcount(builder, targetcount)

def PrimitiveInstanceAddTargetcout(builder, targetcout):
    builder.PrependInt32Slot(175, targetcout, 0)

def AddTargetcout(builder, targetcout):
    PrimitiveInstanceAddTargetcout(builder, targetcout)

def PrimitiveInstanceAddTargetrank(builder, targetrank):
    builder.PrependInt32Slot(176, targetrank, 0)

def AddTargetrank(builder, targetrank):
    PrimitiveInstanceAddTargetrank(builder, targetrank)

def PrimitiveInstanceAddTypeclass(builder, typeclass):
    builder.PrependInt32Slot(177, typeclass, 0)

def AddTypeclass(builder, typeclass):
    PrimitiveInstanceAddTypeclass(builder, typeclass)

def PrimitiveInstanceAddTypekeyval(builder, typekeyval):
    builder.PrependInt32Slot(178, typekeyval, 0)

def AddTypekeyval(builder, typekeyval):
    PrimitiveInstanceAddTypekeyval(builder, typekeyval)

def PrimitiveInstanceAddWhence(builder, whence):
    builder.PrependInt32Slot(179, whence, 0)

def AddWhence(builder, whence):
    PrimitiveInstanceAddWhence(builder, whence)

def PrimitiveInstanceAddWin(builder, win):
    builder.PrependInt32Slot(180, win, 0)

def AddWin(builder, win):
    PrimitiveInstanceAddWin(builder, win)

def PrimitiveInstanceAddWinkeyval(builder, winkeyval):
    builder.PrependInt32Slot(181, winkeyval, 0)

def AddWinkeyval(builder, winkeyval):
    PrimitiveInstanceAddWinkeyval(builder, winkeyval)

def PrimitiveInstanceAddCancelfn(builder, cancelfn):
    builder.PrependUOffsetTRelativeSlot(182, flatbuffers.number_types.UOffsetTFlags.py_type(cancelfn), 0)

def AddCancelfn(builder, cancelfn):
    PrimitiveInstanceAddCancelfn(builder, cancelfn)

def PrimitiveInstanceAddCommand(builder, command):
    builder.PrependUOffsetTRelativeSlot(183, flatbuffers.number_types.UOffsetTFlags.py_type(command), 0)

def AddCommand(builder, command):
    PrimitiveInstanceAddCommand(builder, command)

def PrimitiveInstanceAddCommcopyattrfn(builder, commcopyattrfn):
    builder.PrependUOffsetTRelativeSlot(184, flatbuffers.number_types.UOffsetTFlags.py_type(commcopyattrfn), 0)

def AddCommcopyattrfn(builder, commcopyattrfn):
    PrimitiveInstanceAddCommcopyattrfn(builder, commcopyattrfn)

def PrimitiveInstanceAddCommdeleteattrfn(builder, commdeleteattrfn):
    builder.PrependUOffsetTRelativeSlot(185, flatbuffers.number_types.UOffsetTFlags.py_type(commdeleteattrfn), 0)

def AddCommdeleteattrfn(builder, commdeleteattrfn):
    PrimitiveInstanceAddCommdeleteattrfn(builder, commdeleteattrfn)

def PrimitiveInstanceAddCommname(builder, commname):
    builder.PrependUOffsetTRelativeSlot(186, flatbuffers.number_types.UOffsetTFlags.py_type(commname), 0)

def AddCommname(builder, commname):
    PrimitiveInstanceAddCommname(builder, commname)

def PrimitiveInstanceAddDatarep(builder, datarep):
    builder.PrependUOffsetTRelativeSlot(187, flatbuffers.number_types.UOffsetTFlags.py_type(datarep), 0)

def AddDatarep(builder, datarep):
    PrimitiveInstanceAddDatarep(builder, datarep)

def PrimitiveInstanceAddDtypefileextentfn(builder, dtypefileextentfn):
    builder.PrependUOffsetTRelativeSlot(188, flatbuffers.number_types.UOffsetTFlags.py_type(dtypefileextentfn), 0)

def AddDtypefileextentfn(builder, dtypefileextentfn):
    PrimitiveInstanceAddDtypefileextentfn(builder, dtypefileextentfn)

def PrimitiveInstanceAddFilename(builder, filename):
    builder.PrependUOffsetTRelativeSlot(189, flatbuffers.number_types.UOffsetTFlags.py_type(filename), 0)

def AddFilename(builder, filename):
    PrimitiveInstanceAddFilename(builder, filename)

def PrimitiveInstanceAddFreefn(builder, freefn):
    builder.PrependUOffsetTRelativeSlot(190, flatbuffers.number_types.UOffsetTFlags.py_type(freefn), 0)

def AddFreefn(builder, freefn):
    PrimitiveInstanceAddFreefn(builder, freefn)

def PrimitiveInstanceAddFunction(builder, function):
    builder.PrependUOffsetTRelativeSlot(191, flatbuffers.number_types.UOffsetTFlags.py_type(function), 0)

def AddFunction(builder, function):
    PrimitiveInstanceAddFunction(builder, function)

def PrimitiveInstanceAddKeys(builder, keys):
    builder.PrependUOffsetTRelativeSlot(192, flatbuffers.number_types.UOffsetTFlags.py_type(keys), 0)

def AddKeys(builder, keys):
    PrimitiveInstanceAddKeys(builder, keys)

def PrimitiveInstanceAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(193, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    PrimitiveInstanceAddName(builder, name)

def PrimitiveInstanceAddPortname(builder, portname):
    builder.PrependUOffsetTRelativeSlot(194, flatbuffers.number_types.UOffsetTFlags.py_type(portname), 0)

def AddPortname(builder, portname):
    PrimitiveInstanceAddPortname(builder, portname)

def PrimitiveInstanceAddQueryfn(builder, queryfn):
    builder.PrependUOffsetTRelativeSlot(195, flatbuffers.number_types.UOffsetTFlags.py_type(queryfn), 0)

def AddQueryfn(builder, queryfn):
    PrimitiveInstanceAddQueryfn(builder, queryfn)

def PrimitiveInstanceAddReadconversionfn(builder, readconversionfn):
    builder.PrependUOffsetTRelativeSlot(196, flatbuffers.number_types.UOffsetTFlags.py_type(readconversionfn), 0)

def AddReadconversionfn(builder, readconversionfn):
    PrimitiveInstanceAddReadconversionfn(builder, readconversionfn)

def PrimitiveInstanceAddServicename(builder, servicename):
    builder.PrependUOffsetTRelativeSlot(197, flatbuffers.number_types.UOffsetTFlags.py_type(servicename), 0)

def AddServicename(builder, servicename):
    PrimitiveInstanceAddServicename(builder, servicename)

def PrimitiveInstanceAddString(builder, string):
    builder.PrependUOffsetTRelativeSlot(198, flatbuffers.number_types.UOffsetTFlags.py_type(string), 0)

def AddString(builder, string):
    PrimitiveInstanceAddString(builder, string)

def PrimitiveInstanceAddTypecopyattrfn(builder, typecopyattrfn):
    builder.PrependUOffsetTRelativeSlot(199, flatbuffers.number_types.UOffsetTFlags.py_type(typecopyattrfn), 0)

def AddTypecopyattrfn(builder, typecopyattrfn):
    PrimitiveInstanceAddTypecopyattrfn(builder, typecopyattrfn)

def PrimitiveInstanceAddTypedeleteattrfn(builder, typedeleteattrfn):
    builder.PrependUOffsetTRelativeSlot(200, flatbuffers.number_types.UOffsetTFlags.py_type(typedeleteattrfn), 0)

def AddTypedeleteattrfn(builder, typedeleteattrfn):
    PrimitiveInstanceAddTypedeleteattrfn(builder, typedeleteattrfn)

def PrimitiveInstanceAddTypename(builder, typename):
    builder.PrependUOffsetTRelativeSlot(201, flatbuffers.number_types.UOffsetTFlags.py_type(typename), 0)

def AddTypename(builder, typename):
    PrimitiveInstanceAddTypename(builder, typename)

def PrimitiveInstanceAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(202, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    PrimitiveInstanceAddValue(builder, value)

def PrimitiveInstanceAddVersions(builder, versions):
    builder.PrependUOffsetTRelativeSlot(203, flatbuffers.number_types.UOffsetTFlags.py_type(versions), 0)

def AddVersions(builder, versions):
    PrimitiveInstanceAddVersions(builder, versions)

def PrimitiveInstanceAddWincopyattrfn(builder, wincopyattrfn):
    builder.PrependUOffsetTRelativeSlot(204, flatbuffers.number_types.UOffsetTFlags.py_type(wincopyattrfn), 0)

def AddWincopyattrfn(builder, wincopyattrfn):
    PrimitiveInstanceAddWincopyattrfn(builder, wincopyattrfn)

def PrimitiveInstanceAddWindeleteattrfn(builder, windeleteattrfn):
    builder.PrependUOffsetTRelativeSlot(205, flatbuffers.number_types.UOffsetTFlags.py_type(windeleteattrfn), 0)

def AddWindeleteattrfn(builder, windeleteattrfn):
    PrimitiveInstanceAddWindeleteattrfn(builder, windeleteattrfn)

def PrimitiveInstanceAddWinname(builder, winname):
    builder.PrependUOffsetTRelativeSlot(206, flatbuffers.number_types.UOffsetTFlags.py_type(winname), 0)

def AddWinname(builder, winname):
    PrimitiveInstanceAddWinname(builder, winname)

def PrimitiveInstanceAddWriteconversionfn(builder, writeconversionfn):
    builder.PrependUOffsetTRelativeSlot(207, flatbuffers.number_types.UOffsetTFlags.py_type(writeconversionfn), 0)

def AddWriteconversionfn(builder, writeconversionfn):
    PrimitiveInstanceAddWriteconversionfn(builder, writeconversionfn)

def PrimitiveInstanceEnd(builder):
    return builder.EndObject()

def End(builder):
    return PrimitiveInstanceEnd(builder)
